{"title":"MySQL笔记","date":"2021-06-09T01:47:00.000Z","date_formatted":{"ll":"Jun 9, 2021","L":"06/09/2021","MM-DD":"06-09"},"link":"2021/06/08/MySQL笔记","comments":true,"tags":["Mysql"],"categories":["数据库"],"updated":"2021-06-09T10:10:24.681Z","content":"<blockquote>\n<p>本教程为mysql初步笔记，可以简单粗略的将mysql学习一遍</p>\n</blockquote>\n<h3 id=\"第一个部分\">第一个部分<a title=\"#第一个部分\" href=\"#第一个部分\"></a></h3>\n<p>1、sql、DB、DBMS分别是什么，他们之间的关系？</p>\n<pre><code>DB: \n\tDataBase（数据库，数据库实际上在硬盘上以文件的形式存在）\nDBMS: \n\tDataBase Management System（数据库管理系统，常见的有：MySQL Oracle DB2 Sybase SqlServer...）\n\nSQL: \n\t结构化查询语言，是一门标准通用的语言。标准的sql适合于所有的数据库产品。\n\tSQL属于高级语言。只要能看懂英语单词的，写出来的sql语句，可以读懂什么意思。\n\tSQL语句在执行的时候，实际上内部也会先进行编译，然后再执行sql。（sql语句的编译由DBMS完成。）\n\nDBMS负责执行sql语句，通过执行sql语句来操作DB当中的数据。\nDBMS -(执行)-&gt; SQL -(操作)-&gt; DB\n</code></pre>\n<p>2、什么是表？</p>\n<pre><code>表：table\n\n表：table是数据库的基本组成单元，所有的数据都以表格的形式组织，目的是可读性强。\n\n一个表包括行和列：\n\t行：被称为数据/记录(data)\n\t列：被称为字段(column)\n\n学号(int)\t姓名(varchar)\t年龄(int)\n------------------------------------\n110\t\t\t张三\t\t\t\t20\n120\t\t\t李四\t\t\t\t21\n\n每一个字段应该包括哪些属性？\n\t字段名、数据类型、相关的约束。\n</code></pre>\n<p>3、学习MySQL主要还是学习通用的SQL语句，那么SQL语句包括增删改查，SQL语句怎么分类呢？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DQL（数据查询语言）: 查询语句，凡是select语句都是DQL。</span><br><span class=\"line\">DML（数据操作语言）：insert delete update，对表当中的数据进行增删改。</span><br><span class=\"line\">DDL（数据定义语言）：create drop alter，对表结构的增删改。</span><br><span class=\"line\">TCL（事务控制语言）：commit提交事务，rollback回滚事务。(TCL中的T是Transaction)</span><br><span class=\"line\">DCL（数据控制语言）: grant授权、revoke撤销权限等。</span><br></pre></td></tr></table></figure>\n<p>4、导入数据（后期大家练习的时候使用这个演示的数据）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t第一步：登录mysql数据库管理系统</span><br><span class=\"line\">\t\tdos命令窗口：</span><br><span class=\"line\">\t\t\tmysql -uroot -p333</span><br><span class=\"line\">\t第二步：查看有哪些数据库</span><br><span class=\"line\">\tshow databases; (这个不是SQL语句，属于MySQL的命令。)</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| Database           |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| information_schema |</span><br><span class=\"line\">| mysql              |</span><br><span class=\"line\">| performance_schema |</span><br><span class=\"line\">| test               |</span><br><span class=\"line\">+-------------------+\t</span><br></pre></td></tr></table></figure>\n<pre><code>\t第三步：创建属于我们自己的数据库\n\t\tcreate database bjpowernode; (这个不是SQL语句，属于MySQL的命令。)\n\t第四步：使用bjpowernode数据\n\t\tuse bjpowernode; (这个不是SQL语句，属于MySQL的命令。)\n\t第五步：查看当前使用的数据库中有哪些表？\n\t\tshow tables; (这个不是SQL语句，属于MySQL的命令。)\n\t第六步：初始化数据\n\t\tmysql&gt; source D:\\course\\05-MySQL\\resources\\bjpowernode.sql\n注意：数据初始化完成之后，有三张表：\n+-----------------------+\n| Tables_in_bjpowernode |\n+-----------------------+\n| dept                  |\n| emp                   |\n| salgrade              |\n+-----------------------+\n</code></pre>\n<p>5、bjpowernode.sql</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这个文件以sql结尾，这样的文件被称为“sql脚本”。什么是sql脚本呢？</span><br><span class=\"line\">当一个文件的扩展名是.sql，并且该文件中编写了大量的sql语句，我们称这样的文件为sql脚本。</span><br><span class=\"line\">注意：直接使用source命令可以执行sql脚本。</span><br><span class=\"line\">sql脚本中的数据量太大的时候，无法打开，请使用source命令完成初始化。</span><br></pre></td></tr></table></figure>\n<p>6、删除数据库：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drop database bjpowernode;</span><br></pre></td></tr></table></figure>\n<p>7、查看表结构：</p>\n<pre><code>\t+-----------------------+\n\t| Tables_in_bjpowernode |\n\t+-----------------------+\n\t| dept                  |   (部门表)\n\t| emp                   |   (员工表)\n\t| salgrade              |   (工资等级表)\n\t+-----------------------+\nmysql&gt; desc dept;\n+--------+-------------+------+-----+---------+-------+\n| Field  | Type        | Null | Key | Default | Extra |\n+--------+-------------+------+-----+---------+-------+\n| DEPTNO | int(2)      | NO   | PRI | NULL    |       |\t\t部门编号\n| DNAME  | varchar(14) | YES  |     | NULL    |       |\t\t部门名称\n| LOC    | varchar(13) | YES  |     | NULL    |       |\t\t部门位置\n+--------+-------------+------+-----+---------+-------+\n\nmysql&gt; desc emp;\n+----------+-------------+------+-----+---------+-------+\n| Field    | Type        | Null | Key | Default | Extra |\n+----------+-------------+------+-----+---------+-------+\n| EMPNO    | int(4)      | NO   | PRI | NULL    |       |\t员工编号\n| ENAME    | varchar(10) | YES  |     | NULL    |       |\t员工姓名\n| JOB      | varchar(9)  | YES  |     | NULL    |       |\t工作岗位\n| MGR      | int(4)      | YES  |     | NULL    |       |\t上级领导编号\n| HIREDATE | date        | YES  |     | NULL    |       |\t入职日期\n| SAL      | double(7,2) | YES  |     | NULL    |       |\t月薪\n| COMM     | double(7,2) | YES  |     | NULL    |       |\t补助/津贴\n| DEPTNO   | int(2)      | YES  |     | NULL    |       |\t部门编号\n+----------+-------------+------+-----+---------+-------+\n\nmysql&gt; desc salgrade;\n+-------+---------+------+-----+---------+-------+\n| Field | Type    | Null | Key | Default | Extra |\n+-------+---------+------+-----+---------+-------+\n| GRADE | int(11) | YES  |     | NULL    |       |\t\t等级\n| LOSAL | int(11) | YES  |     | NULL    |       |\t\t最低薪资\n| HISAL | int(11) | YES  |     | NULL    |       |\t\t最高薪资\n+-------+---------+------+-----+---------+-------+\n</code></pre>\n<p>8、表中的数据？</p>\n<p>mysql&gt; select * from emp;</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-------+--------+-----------+------+------------+---------+---------+--------+</span><br><span class=\"line\">| EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |</span><br><span class=\"line\">+-------+--------+-----------+------+------------+---------+---------+--------+</span><br><span class=\"line\">|  7369 | SMITH  | CLERK     | 7902 | 1980-12-17 |  800.00 |    NULL |     20 |</span><br><span class=\"line\">|  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |</span><br><span class=\"line\">|  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |</span><br><span class=\"line\">|  7566 | JONES  | MANAGER   | 7839 | 1981-04-02 | 2975.00 |    NULL |     20 |</span><br><span class=\"line\">|  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |</span><br><span class=\"line\">|  7698 | BLAKE  | MANAGER   | 7839 | 1981-05-01 | 2850.00 |    NULL |     30 |</span><br><span class=\"line\">|  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |    NULL |     10 |</span><br><span class=\"line\">|  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |    NULL |     20 |</span><br><span class=\"line\">|  7839 | KING   | PRESIDENT | NULL | 1981-11-17 | 5000.00 |    NULL |     10 |</span><br><span class=\"line\">|  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |</span><br><span class=\"line\">|  7876 | ADAMS  | CLERK     | 7788 | 1987-05-23 | 1100.00 |    NULL |     20 |</span><br><span class=\"line\">|  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950.00 |    NULL |     30 |</span><br><span class=\"line\">|  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |    NULL |     20 |</span><br><span class=\"line\">|  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300.00 |    NULL |     10 |</span><br><span class=\"line\">+-------+--------+-----------+------+------------+---------+---------+--------+</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from dept;</span><br><span class=\"line\">+--------+------------+----------+</span><br><span class=\"line\">| DEPTNO | DNAME      | LOC      |</span><br><span class=\"line\">+--------+------------+----------+</span><br><span class=\"line\">|     10 | ACCOUNTING | NEW YORK |</span><br><span class=\"line\">|     20 | RESEARCH   | DALLAS   |</span><br><span class=\"line\">|     30 | SALES      | CHICAGO  |</span><br><span class=\"line\">|     40 | OPERATIONS | BOSTON   |</span><br><span class=\"line\">+--------+------------+----------+</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from salgrade;</span><br><span class=\"line\">+-------+-------+-------+</span><br><span class=\"line\">| GRADE | LOSAL | HISAL |</span><br><span class=\"line\">+-------+-------+-------+</span><br><span class=\"line\">|     1 |   700 |  1200 |</span><br><span class=\"line\">|     2 |  1201 |  1400 |</span><br><span class=\"line\">|     3 |  1401 |  2000 |</span><br><span class=\"line\">|     4 |  2001 |  3000 |</span><br><span class=\"line\">|     5 |  3001 |  9999 |</span><br><span class=\"line\">+-------+-------+-------+</span><br></pre></td></tr></table></figure>\n<p>9、常用命令？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select database(); 查看当前使用的是哪个数据库</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">| database()  |</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">| bjpowernode |</span><br><span class=\"line\">+-------------+</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select version(); 查看mysql的版本号。</span><br><span class=\"line\">+-----------+</span><br><span class=\"line\">| version() |</span><br><span class=\"line\">+-----------+</span><br><span class=\"line\">| 5.5.36    |</span><br><span class=\"line\">+-----------+</span><br><span class=\"line\">\\c   命令，结束一条语句。</span><br><span class=\"line\">exit 命令，退出mysql。</span><br></pre></td></tr></table></figure>\n<p>10、查看创建表的语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show create table emp;</span><br></pre></td></tr></table></figure>\n<p>11、简单的查询语句（DQL）</p>\n<pre><code>语法格式：\n\tselect 字段名1,字段名2,字段名3,.... from 表名;\n\n提示：\n\t1、任何一条sql语句以“;”结尾。\n\t2、sql语句不区分大小写。\n\n查询员工的年薪？（字段可以参与数学运算。）\n\tselect ename,sal * 12 from emp;\n\t+--------+----------+\n\t| ename  | sal * 12 |\n\t+--------+----------+\n\t| SMITH  |  9600.00 |\n\t| ALLEN  | 19200.00 |\n\t| WARD   | 15000.00 |\n\t| JONES  | 35700.00 |\n\t| MARTIN | 15000.00 |\n\t| BLAKE  | 34200.00 |\n\t| CLARK  | 29400.00 |\n\t| SCOTT  | 36000.00 |\n\t| KING   | 60000.00 |\n\t| TURNER | 18000.00 |\n\t| ADAMS  | 13200.00 |\n\t| JAMES  | 11400.00 |\n\t| FORD   | 36000.00 |\n\t| MILLER | 15600.00 |\n\t+--------+----------+\n\n给查询结果的列重命名？\n\tselect ename,sal * 12 as yearsal from emp;\n\n别名中有中文？\n\tselect ename,sal * 12 as 年薪 from emp; // 错误\n\tselect ename,sal * 12 as '年薪' from emp;\n\t+--------+----------+\n\t| ename  | 年薪        |\n\t+--------+----------+\n\t| SMITH  |  9600.00 |\n\t| ALLEN  | 19200.00 |\n\t| WARD   | 15000.00 |\n\t| JONES  | 35700.00 |\n\t| MARTIN | 15000.00 |\n\t| BLAKE  | 34200.00 |\n\t| CLARK  | 29400.00 |\n\t| SCOTT  | 36000.00 |\n\t| KING   | 60000.00 |\n\t| TURNER | 18000.00 |\n\t| ADAMS  | 13200.00 |\n\t| JAMES  | 11400.00 |\n\t| FORD   | 36000.00 |\n\t| MILLER | 15600.00 |\n\t+--------+----------+\n\n注意：标准sql语句中要求字符串使用单引号括起来。虽然mysql支持双引号，尽量别用。\n\nas关键字可以省略？\n\tmysql&gt; select empno,ename,sal * 12 yearsal from emp;\n\t+-------+--------+----------+\n\t| empno | ename  | yearsal  |\n\t+-------+--------+----------+\n\t|  7369 | SMITH  |  9600.00 |\n\t|  7499 | ALLEN  | 19200.00 |\n\t|  7521 | WARD   | 15000.00 |\n\t|  7566 | JONES  | 35700.00 |\n\t|  7654 | MARTIN | 15000.00 |\n\t|  7698 | BLAKE  | 34200.00 |\n\t|  7782 | CLARK  | 29400.00 |\n\t|  7788 | SCOTT  | 36000.00 |\n\t|  7839 | KING   | 60000.00 |\n\t|  7844 | TURNER | 18000.00 |\n\t|  7876 | ADAMS  | 13200.00 |\n\t|  7900 | JAMES  | 11400.00 |\n\t|  7902 | FORD   | 36000.00 |\n\t|  7934 | MILLER | 15600.00 |\n\t+-------+--------+----------+\n\n查询所有字段？\n\tselect * from emp; // 实际开发中不建议使用*，效率较低。\n</code></pre>\n<p>12、条件查询。</p>\n<pre><code>\t语法格式：\n\t\tselect \n\t\t\t字段,字段...\n\t\tfrom\n\t\t\t表名\n\t\twhere\n\t\t\t条件;\n\n执行顺序：先from，然后where，最后select\n\n查询工资等于5000的员工姓名？\n\tselect ename from emp where sal = 5000;\n\t+-------+\n\t| ename |\n\t+-------+\n\t| KING  |\n\t+-------+\n查询SMITH的工资？\n\tselect sal from emp where ename = 'SMITH'; // 字符串使用单引号括起来。\n\t+--------+\n\t| sal    |\n\t+--------+\n\t| 800.00 |\n\t+--------+\n找出工资高于3000的员工？\n\tselect ename,sal from emp where sal &gt; 3000;\n\n\tselect ename,sal from emp where sal &gt;= 3000;\n\n\tselect ename,sal from emp where sal &lt; 3000;\n\n\tselect ename,sal from emp where sal &lt;= 3000;\n\n找出工资不等于3000的？\n\tselect ename,sal from emp where sal &lt;&gt; 3000;\n\tselect ename,sal from emp where sal != 3000;\n\n找出工资在1100和3000之间的员工，包括1100和3000？\n\tselect ename,sal from emp where sal &gt;= 1100 and sal &lt;= 3000;\n\n\tselect ename,sal from emp where sal between 1100 and 3000; // between...and...是闭区间 [1100 ~ 3000]\n\n\tselect ename,sal from emp where sal between 3000 and 1100; // 查询不到任何数据\n\n\tbetween and在使用的时候必须左小右大。\n\n\tbetween and除了可以使用在数字方面之外，还可以使用在字符串方面。\n\tselect ename from emp where ename between 'A' and 'C';\n\t+-------+\n\t| ename |\n\t+-------+\n\t| ALLEN |\n\t| BLAKE |\n\t| ADAMS |\n\t+-------+\n\tselect ename from emp where ename between 'A' and 'D'; // 左闭右开。\n\n\t找出哪些人津贴为NULL？\n\t\t在数据库当中NULL不是一个值，代表什么也没有，为空。\n\t\t空不是一个值，不能用等号衡量。\n\t\t必须使用 is null或者is not null\n\t\tselect ename,sal,comm from emp where comm is null;\n\t\t+--------+---------+------+\n\t\t| ename  | sal     | comm |\n\t\t+--------+---------+------+\n\t\t| SMITH  |  800.00 | NULL |\n\t\t| JONES  | 2975.00 | NULL |\n\t\t| BLAKE  | 2850.00 | NULL |\n\t\t| CLARK  | 2450.00 | NULL |\n\t\t| SCOTT  | 3000.00 | NULL |\n\t\t| KING   | 5000.00 | NULL |\n\t\t| ADAMS  | 1100.00 | NULL |\n\t\t| JAMES  |  950.00 | NULL |\n\t\t| FORD   | 3000.00 | NULL |\n\t\t| MILLER | 1300.00 | NULL |\n\t\t+--------+---------+------+\n\t\tselect ename,sal,comm from emp where comm = null;\n\t\tEmpty set (0.00 sec)\n\n\t找出哪些人津贴不为NULL？\n\t\tselect ename,sal,comm from emp where comm is not null;\n\t\t+--------+---------+---------+\n\t\t| ename  | sal     | comm    |\n\t\t+--------+---------+---------+\n\t\t| ALLEN  | 1600.00 |  300.00 |\n\t\t| WARD   | 1250.00 |  500.00 |\n\t\t| MARTIN | 1250.00 | 1400.00 |\n\t\t| TURNER | 1500.00 |    0.00 |\n\t\t+--------+---------+---------+\n\t\n\t找出哪些人没有津贴？\n\t\tselect ename,sal,comm from emp where comm is null or comm = 0;\n\t\t+--------+---------+------+\n\t\t| ename  | sal     | comm |\n\t\t+--------+---------+------+\n\t\t| SMITH  |  800.00 | NULL |\n\t\t| JONES  | 2975.00 | NULL |\n\t\t| BLAKE  | 2850.00 | NULL |\n\t\t| CLARK  | 2450.00 | NULL |\n\t\t| SCOTT  | 3000.00 | NULL |\n\t\t| KING   | 5000.00 | NULL |\n\t\t| TURNER | 1500.00 | 0.00 |\n\t\t| ADAMS  | 1100.00 | NULL |\n\t\t| JAMES  |  950.00 | NULL |\n\t\t| FORD   | 3000.00 | NULL |\n\t\t| MILLER | 1300.00 | NULL |\n\t\t+--------+---------+------+\n\t\n\t找出工作岗位是MANAGER和SALESMAN的员工？\n\t\tselect ename,job from emp where job = 'MANAGER' or job = 'SALESMAN';\n\t\t+--------+----------+\n\t\t| ename  | job      |\n\t\t+--------+----------+\n\t\t| ALLEN  | SALESMAN |\n\t\t| WARD   | SALESMAN |\n\t\t| JONES  | MANAGER  |\n\t\t| MARTIN | SALESMAN |\n\t\t| BLAKE  | MANAGER  |\n\t\t| CLARK  | MANAGER  |\n\t\t| TURNER | SALESMAN |\n\t\t+--------+----------+\n\t\n\tand和or联合起来用：找出薪资大于1000的并且部门编号是20或30部门的员工。\n\t\tselect ename,sal,deptno from emp where sal &gt; 1000 and deptno = 20 or deptno = 30; // 错误的\n\t\tselect ename,sal,deptno from emp where sal &gt; 1000 and (deptno = 20 or deptno = 30); // 正确的。\n\t\t注意：当运算符的优先级不确定的时候加小括号。\n\t\n\tin等同于or：找出工作岗位是MANAGER和SALESMAN的员工？\n\t\tselect ename,job from emp where job = 'SALESMAN' or job = 'MANAGER';\n\t\tselect ename,job from emp where job in('SALESMAN', 'MANAGER');\n\n\t\tselect ename,job from emp where sal in(800, 5000); // in后面的值不是区间，是具体的值。\n\t\t+-------+-----------+\n\t\t| ename | job       |\n\t\t+-------+-----------+\n\t\t| SMITH | CLERK     |\n\t\t| KING  | PRESIDENT |\n\t\t+-------+-----------+\n\t\n\tnot in: 不在这几个值当中。\n\t\tselect ename,job from emp where sal not in(800, 5000);\n\t\n\t模糊查询like ? \n\t\t找出名字当中含有O的？\n\t\t\t（在模糊查询当中，必须掌握两个特殊的符号，一个是%，一个是_）\n\t\t\t%代表任意多个字符，_代表任意1个字符。\n\t\t\tselect ename from emp where ename like '%O%';\n\t\t\t+-------+\n\t\t\t| ename |\n\t\t\t+-------+\n\t\t\t| JONES |\n\t\t\t| SCOTT |\n\t\t\t| FORD  |\n\t\t\t+-------+\n\t\t找出名字中第二个字母是A的？\n\t\t\tselect ename from emp where ename like '_A%';\n\t\t\t+--------+\n\t\t\t| ename  |\n\t\t\t+--------+\n\t\t\t| WARD   |\n\t\t\t| MARTIN |\n\t\t\t| JAMES  |\n\t\t\t+--------+\n\t\t找出名字中有下划线的？\n\t\t\tmysql&gt; select * from t_user;\n\t\t\t+------+----------+\n\t\t\t| id   | name     |\n\t\t\t+------+----------+\n\t\t\t|    1 | zhangsan |\n\t\t\t|    2 | lisi     |\n\t\t\t|    3 | WANG_WU  |\n\t\t\t+------+----------+\n\t\t\tselect name from t_user where name like '%_%';\n\t\t\t+----------+\n\t\t\t| name     |\n\t\t\t+----------+\n\t\t\t| zhangsan |\n\t\t\t| lisi     |\n\t\t\t| WANG_WU  |\n\t\t\t+----------+\n\t\t\tselect name from t_user where name like '%\\_%';\n\t\t\t+---------+\n\t\t\t| name    |\n\t\t\t+---------+\n\t\t\t| WANG_WU |\n\t\t\t+---------+\n\n\t\t找出名字中最后一个字母是T的？\n\t\t\tselect ename from emp where ename like '%T';\n\t\t\t+-------+\n\t\t\t| ename |\n\t\t\t+-------+\n\t\t\t| SCOTT | \n\t\t\t+-------+\n</code></pre>\n<p>13、排序（升序、降序）</p>\n<p>按照工资升序，找出员工名和薪资？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tselect </span><br><span class=\"line\">\t\tename,sal </span><br><span class=\"line\">\tfrom </span><br><span class=\"line\">\t\temp </span><br><span class=\"line\">\torder by</span><br><span class=\"line\">\t\tsal;</span><br><span class=\"line\">+--------+---------+</span><br><span class=\"line\">| ename  | sal     |</span><br><span class=\"line\">+--------+---------+</span><br><span class=\"line\">| SMITH  |  800.00 |</span><br><span class=\"line\">| JAMES  |  950.00 |</span><br><span class=\"line\">| ADAMS  | 1100.00 |</span><br><span class=\"line\">| WARD   | 1250.00 |</span><br><span class=\"line\">| MARTIN | 1250.00 |</span><br><span class=\"line\">| MILLER | 1300.00 |</span><br><span class=\"line\">| TURNER | 1500.00 |</span><br><span class=\"line\">| ALLEN  | 1600.00 |</span><br><span class=\"line\">| CLARK  | 2450.00 |</span><br><span class=\"line\">| BLAKE  | 2850.00 |</span><br><span class=\"line\">| JONES  | 2975.00 |</span><br><span class=\"line\">| FORD   | 3000.00 |</span><br><span class=\"line\">| SCOTT  | 3000.00 |</span><br><span class=\"line\">| KING   | 5000.00 |</span><br><span class=\"line\">+--------+---------+</span><br><span class=\"line\">注意：默认是升序。怎么指定升序或者降序呢？asc表示升序，desc表示降序。</span><br><span class=\"line\">\tselect ename , sal from emp order by sal; // 升序</span><br><span class=\"line\">\tselect ename , sal from emp order by sal asc; // 升序</span><br><span class=\"line\">\tselect ename , sal from emp order by sal desc; // 降序。</span><br><span class=\"line\"></span><br><span class=\"line\">按照工资的降序排列，当工资相同的时候再按照名字的升序排列。</span><br><span class=\"line\">\tselect ename,sal from emp order by sal desc;</span><br><span class=\"line\">\tselect ename,sal from emp order by sal desc , ename asc;</span><br><span class=\"line\">\t注意：越靠前的字段越能起到主导作用。只有当前面的字段无法完成排序的时候，才会启用后面的字段。</span><br><span class=\"line\"></span><br><span class=\"line\">找出工作岗位是SALESMAN的员工，并且要求按照薪资的降序排列。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select </span><br><span class=\"line\">\t\tename,job,sal</span><br><span class=\"line\">\tfrom</span><br><span class=\"line\">\t\temp</span><br><span class=\"line\">\twhere </span><br><span class=\"line\">\t\tjob = &#x27;SALESMAN&#x27;</span><br><span class=\"line\">\torder by</span><br><span class=\"line\">\t\tsal desc;</span><br><span class=\"line\">+--------+----------+---------+</span><br><span class=\"line\">| ename  | job      | sal     |</span><br><span class=\"line\">+--------+----------+---------+</span><br><span class=\"line\">| ALLEN  | SALESMAN | 1600.00 |</span><br><span class=\"line\">| TURNER | SALESMAN | 1500.00 |</span><br><span class=\"line\">| WARD   | SALESMAN | 1250.00 |</span><br><span class=\"line\">| MARTIN | SALESMAN | 1250.00 |</span><br><span class=\"line\">+--------+----------+---------+</span><br></pre></td></tr></table></figure>\n<pre><code>select \n\t字段\t\t\t\t\t\t3\nfrom\n\t表名\t\t\t\t\t\t1\nwhere\n\t条件\t\t\t\t\t\t2\norder by\n\t....\t\t\t\t\t\t4\n\norder by是最后执行的。\n</code></pre>\n<p>14、分组函数？</p>\n<pre><code>\tcount 计数\n\tsum 求和\n\tavg 平均值\n\tmax 最大值\n\tmin 最小值\n记住：所有的分组函数都是对“某一组”数据进行操作的。\n\n找出工资总和？\n\tselect sum(sal) from emp;\n找出最高工资？\n\tselect max(sal) from emp;\n找出最低工资？\n\tselect min(sal) from emp;\n找出平均工资？\n\tselect avg(sal) from emp;\n找出总人数？\n\tselect count(*) from emp;\n\tselect count(ename) from emp;\n\n分组函数一共5个。\n分组函数还有另一个名字：多行处理函数。\n多行处理函数的特点：输入多行，最终输出的结果是1行。\n\n分组函数自动忽略NULL。\n\tselect count(comm) from emp;\n\t+-------------+\n\t| count(comm) |\n\t+-------------+\n\t|           4 |\n\t+-------------+\n\n\tselect sum(comm) from emp;\n\t+-----------+\n\t| sum(comm) |\n\t+-----------+\n\t|   2200.00 |\n\t+-----------+\n\n\tselect sum(comm) from emp where comm is not null; // 不需要额外添加这个过滤条件。sum函数自动忽略NULL。\n\n\t找出工资高于平均工资的员工？\n\t\tselect avg(sal) from emp; // 平均工资\n\t\t+-------------+\n\t\t| avg(sal)    |\n\t\t+-------------+\n\t\t| 2073.214286 |\n\t\t+-------------+\n\n\t\tselect ename,sal from emp where sal &gt; avg(sal); //ERROR 1111 (HY000): Invalid use of group function\n\t\t思考以上的错误信息：无效的使用了分组函数？\n\t\t\t原因：SQL语句当中有一个语法规则，分组函数不可直接使用在where子句当中。why????\n\t\t\t怎么解释？\n\t\t\t\t因为group by是在where执行之后才会执行的。\n\t\t\t\n\t\t\tselect\t\t5\n\t\t\t\t..\t\t\t\n\t\t\tfrom\t\t\t1\n\t\t\t\t..\n\t\t\twhere\t\t\t2\n\t\t\t\t..\n\t\t\tgroup by\t\t3\n\t\t\t\t..\n\t\t\thaving\t\t4\n\t\t\t\t..\n\t\t\torder by\t\t6\n\t\t\t\t..\n\ncount(*)和count(具体的某个字段)，他们有什么区别？\n\tcount(*):不是统计某个字段中数据的个数，而是统计总记录条数。（和某个字段无关）\n\tcount(comm): 表示统计comm字段中不为NULL的数据总数量。\n\n分组函数也能组合起来用：\n\tselect count(*),sum(sal),avg(sal),max(sal),min(sal) from emp;\n\n\t+----------+----------+-------------+----------+----------+\n\t| count(*) | sum(sal) | avg(sal)    | max(sal) | min(sal) |\n\t+----------+----------+-------------+----------+----------+\n\t|       14 | 29025.00 | 2073.214286 |  5000.00 |   800.00 |\n\t+----------+----------+-------------+----------+----------+\n\n找出工资高于平均工资的员工？\n\t第一步：找出平均工资\n\t\tselect avg(sal) from emp;\n\t\t+-------------+\n\t\t| avg(sal)    |\n\t\t+-------------+\n\t\t| 2073.214286 |\n\t\t+-------------+\n\t第二步：找出高于平均工资的员工\n\t\tselect ename,sal from emp where sal &gt; 2073.214286;\n\t\t+-------+---------+\n\t\t| ename | sal     |\n\t\t+-------+---------+\n\t\t| JONES | 2975.00 |\n\t\t| BLAKE | 2850.00 |\n\t\t| CLARK | 2450.00 |\n\t\t| SCOTT | 3000.00 |\n\t\t| KING  | 5000.00 |\n\t\t| FORD  | 3000.00 |\n\t\t+-------+---------+\n\n\t可合并为\tselect ename,sal from emp where sal &gt; (select avg(sal) from emp);\n</code></pre>\n<p>15、单行处理函数<br>\n什么是单行处理函数？<br>\n输入一行，输出一行。</p>\n<pre><code>计算每个员工的年薪？\n\tselect ename,(sal+comm)*12 as yearsal from emp;\n\t重点：所有数据库都是这样规定的，只要有NULL参与的运算结果一定是NULL。\n\t使用ifnull函数：\n\tselect ename,(sal+ifnull(comm,0))*12 as yearsal from emp;\n\nifnull() 空处理函数？\n\tifnull(可能为NULL的数据,被当做什么处理) ： 属于单行处理函数。\n\tselect ename,ifnull(comm,0) as comm from emp;\n\t+--------+---------+\n\t| ename  | comm    |\n\t+--------+---------+\n\t| SMITH  |    0.00 |\n\t| ALLEN  |  300.00 |\n\t| WARD   |  500.00 |\n\t| JONES  |    0.00 |\n\t| MARTIN | 1400.00 |\n\t| BLAKE  |    0.00 |\n\t| CLARK  |    0.00 |\n\t| SCOTT  |    0.00 |\n\t| KING   |    0.00 |\n\t| TURNER |    0.00 |\n\t| ADAMS  |    0.00 |\n\t| JAMES  |    0.00 |\n\t| FORD   |    0.00 |\n\t| MILLER |    0.00 |\n\t+--------+---------+\n</code></pre>\n<p>16、group by 和 having</p>\n<pre><code>group by ： 按照某个字段或者某些字段进行分组。\nhaving : having是对分组之后的数据进行再次过滤。\n\n案例：找出每个工作岗位的最高薪资。\nselect max(sal),job from emp group by job;\n\n+----------+-----------+\n| max(sal) | job       |\n+----------+-----------+\n|  3000.00 | ANALYST   |\n|  1300.00 | CLERK     |\n|  2975.00 | MANAGER   |\n|  5000.00 | PRESIDENT |\n|  1600.00 | SALESMAN  |\n+----------+-----------+\n</code></pre>\n<p>​</p>\n<pre><code>注意：分组函数一般都会和group by联合使用，这也是为什么它被称为分组函数的原因。\n并且任何一个分组函数（count sum avg max min）都是在group by语句执行结束之后才会执行的。\n当一条sql语句没有group by的话，整张表的数据会自成一组。\n\nselect ename,max(sal),job from emp group by job;\n以上在mysql当中，查询结果是有的，但是结果没有意义，在Oracle数据库当中会报错。语法错误。\nOracle的语法规则比MySQL语法规则严谨。\n记住一个规则：当一条语句中有group by的话，select后面只能跟分组函数和参与分组的字段。\n\n每个工作岗位的平均薪资？\n\tselect job,avg(sal) from emp group by job;\n\t+-----------+-------------+\n\t| job       | avg(sal)    |\n\t+-----------+-------------+\n\t| ANALYST   | 3000.000000 |\n\t| CLERK     | 1037.500000 |\n\t| MANAGER   | 2758.333333 |\n\t| PRESIDENT | 5000.000000 |\n\t| SALESMAN  | 1400.000000 |\n\t+-----------+-------------+\n\n多个字段能不能联合起来一块分组？\n案例：找出每个部门不同工作岗位的最高薪资。\n\tselect \n\t\tdeptno,job,max(sal)\n\tfrom\n\t\temp\n\tgroup by\n\t\tdeptno,job;\n\n找出每个部门的最高薪资，要求显示薪资大于2900的数据。\n\n\t第一步：找出每个部门的最高薪资\n\tselect max(sal),deptno from emp group by deptno;\n\t+----------+--------+\n\t| max(sal) | deptno |\n\t+----------+--------+\n\t|  5000.00 |     10 |\n\t|  3000.00 |     20 |\n\t|  2850.00 |     30 |\n\t+----------+--------+\n\n\t第二步：找出薪资大于2900\n\tselect max(sal),deptno from emp group by deptno having max(sal) &gt; 2900; // 这种方式效率低。\n\t+----------+--------+\n\t| max(sal) | deptno |\n\t+----------+--------+\n\t|  5000.00 |     10 |\n\t|  3000.00 |     20 |\n\t+----------+--------+\n\n\tselect max(sal),deptno from emp where sal &gt; 2900 group by deptno;  // 效率较高，建议能够使用where过滤的尽量使用where。\n\t+----------+--------+\n\t| max(sal) | deptno |\n\t+----------+--------+\n\t|  5000.00 |     10 |\n\t|  3000.00 |     20 |\n\t+----------+--------+\n\n找出每个部门的平均薪资，要求显示薪资大于2000的数据。\n\n第一步：找出每个部门的平均薪资\nselect deptno,avg(sal) from emp group by deptno;\n+--------+-------------+\n| deptno | avg(sal)    |\n+--------+-------------+\n|     10 | 2916.666667 |\n|     20 | 2175.000000 |\n|     30 | 1566.666667 |\n+--------+-------------+\n\n第二步：要求显示薪资大于2000的数据\nselect deptno,avg(sal) from emp group by deptno having avg(sal) &gt; 2000;\t\n+--------+-------------+\n| deptno | avg(sal)    |\n+--------+-------------+\n|     10 | 2916.666667 |\n|     20 | 2175.000000 |\n+--------+-------------+\n\nwhere后面不能使用分组函数：\n\tselect deptno,avg(sal) from emp where avg(sal) &gt; 2000 group by deptno;\t// 错误了。\n\t这种情况只能使用having过滤。\n</code></pre>\n<p>17、总结一个完整的DQL语句怎么写？</p>\n<pre><code>select\t\t    5\n\t..\nfrom\t\t\t1\t\n\t..\nwhere\t\t\t2\n\t..\ngroup by\t\t3\n\t..\nhaving\t\t    4\n\t..\norder by\t\t6\n\t..\n</code></pre>\n<h3 id=\"第二个部分\">第二个部分<a title=\"#第二个部分\" href=\"#第二个部分\"></a></h3>\n<p>1、关于查询结果集的去重？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select distinct job from emp; // distinct关键字去除重复记录。</span><br><span class=\"line\">+-----------+</span><br><span class=\"line\">| job       |</span><br><span class=\"line\">+-----------+</span><br><span class=\"line\">| CLERK     |</span><br><span class=\"line\">| SALESMAN  |</span><br><span class=\"line\">| MANAGER   |</span><br><span class=\"line\">| ANALYST   |</span><br><span class=\"line\">| PRESIDENT |</span><br><span class=\"line\">+-----------+\t</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select ename,distinct job from emp;</span><br><span class=\"line\">以上的sql语句是错误的。</span><br><span class=\"line\">记住：distinct只能出现在所有字段的最前面。</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select distinct deptno,job from emp;</span><br><span class=\"line\">+--------+-----------+</span><br><span class=\"line\">| deptno | job       |</span><br><span class=\"line\">+--------+-----------+</span><br><span class=\"line\">|     20 | CLERK     |</span><br><span class=\"line\">|     30 | SALESMAN  |</span><br><span class=\"line\">|     20 | MANAGER   |</span><br><span class=\"line\">|     30 | MANAGER   |</span><br><span class=\"line\">|     10 | MANAGER   |</span><br><span class=\"line\">|     20 | ANALYST   |</span><br><span class=\"line\">|     10 | PRESIDENT |</span><br><span class=\"line\">|     30 | CLERK     |</span><br><span class=\"line\">|     10 | CLERK     |</span><br><span class=\"line\">+--------+-----------+</span><br></pre></td></tr></table></figure>\n<p>案例：统计岗位的数量？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select count(distinct job) from emp;</span><br><span class=\"line\">+---------------------+</span><br><span class=\"line\">| count(distinct job) |</span><br><span class=\"line\">+---------------------+</span><br><span class=\"line\">|                   5 |</span><br><span class=\"line\">+---------------------+</span><br></pre></td></tr></table></figure>\n<p>2、连接查询</p>\n<p>2.1、什么是连接查询？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t在实际开发中，大部分的情况下都不是从单表中查询数据，一般都是多张表联合查询取出最终的结果。</span><br><span class=\"line\">\t在实际开发中，一般一个业务都会对应多张表，比如：学生和班级，起码两张表。</span><br><span class=\"line\">\t\tstuno\t\tstuname\t\t\tclassno\t\tclassname</span><br><span class=\"line\"></span><br><span class=\"line\">-----------------------------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t1\t\t\tzs\t\t\t\t1\t\t\t北京大兴区亦庄经济技术开发区第二中学高三1班</span><br><span class=\"line\">\t\t2\t\t\tls\t\t\t\t1\t\t\t北京大兴区亦庄经济技术开发区第二中学高三1班</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t\t学生和班级信息存储到一张表中，结果就像上面一样，数据会存在大量的重复，导致数据的冗余。</span><br></pre></td></tr></table></figure>\n<p>2.2、连接查询的分类？<br>\n根据语法出现的年代来划分的话，包括：<br>\nSQL92（一些老的DBA可能还在使用这种语法。DBA：DataBase Administrator，数据库管理员）<br>\nSQL99（比较新的语法）</p>\n<pre><code>根据表的连接方式来划分，包括：\n\t内连接：\n\t\t等值连接\n\t\t非等值连接\n\t\t自连接\n\t外连接：\n\t\t左外连接（左连接）\n\t\t右外连接（右连接）\n\t全连接（这个不讲，很少用！）\n</code></pre>\n<p>2.3、在表的连接查询方面有一种现象被称为：笛卡尔积现象。（笛卡尔乘积现象）</p>\n<p>案例：找出每一个员工的部门名称，要求显示员工名和部门名。<br>\nEMP表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+--------+--------+</span><br><span class=\"line\">| ename  | deptno |</span><br><span class=\"line\">+--------+--------+</span><br><span class=\"line\">| SMITH  |     20 |</span><br><span class=\"line\">| ALLEN  |     30 |</span><br><span class=\"line\">| WARD   |     30 |</span><br><span class=\"line\">| JONES  |     20 |</span><br><span class=\"line\">| MARTIN |     30 |</span><br><span class=\"line\">| BLAKE  |     30 |</span><br><span class=\"line\">| CLARK  |     10 |</span><br><span class=\"line\">| SCOTT  |     20 |</span><br><span class=\"line\">| KING   |     10 |</span><br><span class=\"line\">| TURNER |     30 |</span><br><span class=\"line\">| ADAMS  |     20 |</span><br><span class=\"line\">| JAMES  |     30 |</span><br><span class=\"line\">| FORD   |     20 |</span><br><span class=\"line\">| MILLER |     10 |</span><br><span class=\"line\">+--------+--------+</span><br></pre></td></tr></table></figure>\n<p>DEPT表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+--------+------------+----------+</span><br><span class=\"line\">| DEPTNO | DNAME      | LOC      |</span><br><span class=\"line\">+--------+------------+----------+</span><br><span class=\"line\">|     10 | ACCOUNTING | NEW YORK |</span><br><span class=\"line\">|     20 | RESEARCH   | DALLAS   |</span><br><span class=\"line\">|     30 | SALES      | CHICAGO  |</span><br><span class=\"line\">|     40 | OPERATIONS | BOSTON   |</span><br><span class=\"line\">+--------+------------+----------+</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select ename,dname from emp,dept;</span><br><span class=\"line\">+--------+------------+</span><br><span class=\"line\">| ename  | dname      |</span><br><span class=\"line\">+--------+------------+</span><br><span class=\"line\">| SMITH  | ACCOUNTING |</span><br><span class=\"line\">| SMITH  | RESEARCH   |</span><br><span class=\"line\">| SMITH  | SALES      |</span><br><span class=\"line\">| SMITH  | OPERATIONS |</span><br><span class=\"line\">| ALLEN  | ACCOUNTING |</span><br><span class=\"line\">| ALLEN  | RESEARCH   |</span><br><span class=\"line\">| ALLEN  | SALES      |</span><br><span class=\"line\">| ALLEN  | OPERATIONS |</span><br><span class=\"line\">............</span><br><span class=\"line\">56 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n<p>笛卡尔积现象：当两张表进行连接查询的时候，没有任何条件进行限制，最终的查询结果条数是两张表记录条数的乘积。</p>\n<p>关于表的别名：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select e.ename,d.dname from emp e,dept d;</span><br><span class=\"line\">表的别名有什么好处？</span><br><span class=\"line\">\t第一：执行效率高。</span><br><span class=\"line\">\t第二：可读性好。</span><br></pre></td></tr></table></figure>\n<p>2.4、怎么避免笛卡尔积现象？当然是加条件进行过滤。</p>\n<pre><code>思考：避免了笛卡尔积现象，会减少记录的匹配次数吗？\n\t不会，次数还是56次。只不过显示的是有效记录。\n\n案例：找出每一个员工的部门名称，要求显示员工名和部门名。\n\nselect\t\n\t\te.ename,d.dname\n\tfrom\n\t\temp e , dept d\n\twhere\n\t\te.deptno = d.deptno; //SQL92，以后不用。\n+--------+------------+\n| ename  | dname      |\n+--------+------------+\n| CLARK  | ACCOUNTING |\n| KING   | ACCOUNTING |\n| MILLER | ACCOUNTING |\n| SMITH  | RESEARCH   |\n| JONES  | RESEARCH   |\n| SCOTT  | RESEARCH   |\n| ADAMS  | RESEARCH   |\n| FORD   | RESEARCH   |\n| ALLEN  | SALES      |\n| WARD   | SALES      |\n| MARTIN | SALES      |\n| BLAKE  | SALES      |\n| TURNER | SALES      |\n| JAMES  | SALES      |\n+--------+------------+\n</code></pre>\n<p>2.5、内连接之等值连接：最大特点是：条件是等量关系。</p>\n<p>案例：查询每个员工的部门名称，要求显示员工名和部门名。</p>\n<pre><code>SQL92:（太老，不用了）\n\tselect \n\t\te.ename,d.dname\n\tfrom\n\t\temp e, dept d\n\twhere\n\t\te.deptno = d.deptno;\n\nSQL99：（常用的）\n\tselect \n\t\te.ename,d.dname\n\tfrom\n\t\temp e\n\tjoin\n\t\tdept d\n\ton\n\t\te.deptno = d.deptno;\n// inner可以省略的，带着inner目的是可读性好一些。\nselect \n\te.ename,d.dname\nfrom\n\temp e\ninner join\n\tdept d\non\n\te.deptno = d.deptno;\n\n语法：\n\t...\n\t\tA\n\tjoin\n\t\tB\n\ton\n\t\t连接条件\n\twhere\n\t\t...\n\nSQL99语法结构更清晰一些：表的连接条件和后来的where条件分离了。\n\n+--------+------------+\n| ename  | dname      |\n+--------+------------+\n| CLARK  | ACCOUNTING |\n| KING   | ACCOUNTING |\n| MILLER | ACCOUNTING |\n| SMITH  | RESEARCH   |\n| JONES  | RESEARCH   |\n| SCOTT  | RESEARCH   |\n| ADAMS  | RESEARCH   |\n| FORD   | RESEARCH   |\n| ALLEN  | SALES      |\n| WARD   | SALES      |\n| MARTIN | SALES      |\n| BLAKE  | SALES      |\n| TURNER | SALES      |\n| JAMES  | SALES      |\n+--------+------------+\n</code></pre>\n<p>2.6、内连接之非等值连接：最大的特点是：连接条件中的关系是非等量关系。</p>\n<p>案例：找出每个员工的工资等级，要求显示员工名、工资、工资等级。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select ename,sal from emp; e</span><br><span class=\"line\">+--------+---------+</span><br><span class=\"line\">| ename  | sal     |</span><br><span class=\"line\">+--------+---------+</span><br><span class=\"line\">| SMITH  |  800.00 |</span><br><span class=\"line\">| ALLEN  | 1600.00 |</span><br><span class=\"line\">| WARD   | 1250.00 |</span><br><span class=\"line\">| JONES  | 2975.00 |</span><br><span class=\"line\">| MARTIN | 1250.00 |</span><br><span class=\"line\">| BLAKE  | 2850.00 |</span><br><span class=\"line\">| CLARK  | 2450.00 |</span><br><span class=\"line\">| SCOTT  | 3000.00 |</span><br><span class=\"line\">| KING   | 5000.00 |</span><br><span class=\"line\">| TURNER | 1500.00 |</span><br><span class=\"line\">| ADAMS  | 1100.00 |</span><br><span class=\"line\">| JAMES  |  950.00 |</span><br><span class=\"line\">| FORD   | 3000.00 |</span><br><span class=\"line\">| MILLER | 1300.00 |</span><br><span class=\"line\">+--------+---------+</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from salgrade; s</span><br><span class=\"line\">+-------+-------+-------+ </span><br><span class=\"line\">| GRADE | LOSAL | HISAL |</span><br><span class=\"line\">+-------+-------+-------+</span><br><span class=\"line\">|     1 |   700 |  1200 |</span><br><span class=\"line\">|     2 |  1201 |  1400 |</span><br><span class=\"line\">|     3 |  1401 |  2000 |</span><br><span class=\"line\">|     4 |  2001 |  3000 |</span><br><span class=\"line\">|     5 |  3001 |  9999 |</span><br><span class=\"line\">+-------+-------+-------+</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select </span><br><span class=\"line\">\te.ename,e.sal,s.grade</span><br><span class=\"line\">from</span><br><span class=\"line\">\temp e</span><br><span class=\"line\">join</span><br><span class=\"line\">\tsalgrade s</span><br><span class=\"line\">on</span><br><span class=\"line\">\te.sal between s.losal and s.hisal;</span><br><span class=\"line\"></span><br><span class=\"line\">// inner可以省略</span><br><span class=\"line\">select </span><br><span class=\"line\">\te.ename,e.sal,s.grade</span><br><span class=\"line\">from</span><br><span class=\"line\">\temp e</span><br><span class=\"line\">inner join</span><br><span class=\"line\">\tsalgrade s</span><br><span class=\"line\">on</span><br><span class=\"line\">\te.sal between s.losal and s.hisal;</span><br><span class=\"line\"></span><br><span class=\"line\">+--------+---------+-------+</span><br><span class=\"line\">| ename  | sal     | grade |</span><br><span class=\"line\">+--------+---------+-------+</span><br><span class=\"line\">| SMITH  |  800.00 |     1 |</span><br><span class=\"line\">| ALLEN  | 1600.00 |     3 |</span><br><span class=\"line\">| WARD   | 1250.00 |     2 |</span><br><span class=\"line\">| JONES  | 2975.00 |     4 |</span><br><span class=\"line\">| MARTIN | 1250.00 |     2 |</span><br><span class=\"line\">| BLAKE  | 2850.00 |     4 |</span><br><span class=\"line\">| CLARK  | 2450.00 |     4 |</span><br><span class=\"line\">| SCOTT  | 3000.00 |     4 |</span><br><span class=\"line\">| KING   | 5000.00 |     5 |</span><br><span class=\"line\">| TURNER | 1500.00 |     3 |</span><br><span class=\"line\">| ADAMS  | 1100.00 |     1 |</span><br><span class=\"line\">| JAMES  |  950.00 |     1 |</span><br><span class=\"line\">| FORD   | 3000.00 |     4 |</span><br><span class=\"line\">| MILLER | 1300.00 |     2 |</span><br><span class=\"line\">+--------+---------+-------+</span><br></pre></td></tr></table></figure>\n<p>2.7、自连接：最大的特点是：一张表看做两张表。自己连接自己。</p>\n<p>案例：找出每个员工的上级领导，要求显示员工名和对应的领导名。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select empno,ename,mgr from emp;</span><br><span class=\"line\">emp a 员工表</span><br><span class=\"line\">+-------+--------+------+</span><br><span class=\"line\">| empno | ename  | mgr  |</span><br><span class=\"line\">+-------+--------+------+</span><br><span class=\"line\">|  7369 | SMITH  | 7902 |</span><br><span class=\"line\">|  7499 | ALLEN  | 7698 |</span><br><span class=\"line\">|  7521 | WARD   | 7698 |</span><br><span class=\"line\">|  7566 | JONES  | 7839 |</span><br><span class=\"line\">|  7654 | MARTIN | 7698 |</span><br><span class=\"line\">|  7698 | BLAKE  | 7839 |</span><br><span class=\"line\">|  7782 | CLARK  | 7839 |</span><br><span class=\"line\">|  7788 | SCOTT  | 7566 |</span><br><span class=\"line\">|  7839 | KING   | NULL |</span><br><span class=\"line\">|  7844 | TURNER | 7698 |</span><br><span class=\"line\">|  7876 | ADAMS  | 7788 |</span><br><span class=\"line\">|  7900 | JAMES  | 7698 |</span><br><span class=\"line\">|  7902 | FORD   | 7566 |</span><br><span class=\"line\">|  7934 | MILLER | 7782 |</span><br><span class=\"line\">+-------+--------+------+</span><br><span class=\"line\">emp b 领导表</span><br><span class=\"line\">+-------+--------+</span><br><span class=\"line\">| empno | ename  |</span><br><span class=\"line\">+-------+--------+</span><br><span class=\"line\">|  7566 | JONES  |</span><br><span class=\"line\">|  7698 | BLAKE  |</span><br><span class=\"line\">|  7782 | CLARK  |</span><br><span class=\"line\">|  7788 | SCOTT  |</span><br><span class=\"line\">|  7839 | KING   |</span><br><span class=\"line\">|  7902 | FORD   |</span><br><span class=\"line\">+-------+--------+</span><br></pre></td></tr></table></figure>\n<p>员工的领导编号 = 领导的员工编号</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select </span><br><span class=\"line\">\ta.ename as &#x27;员工名&#x27;,b.ename as &#x27;领导名&#x27;</span><br><span class=\"line\">from</span><br><span class=\"line\">\temp a</span><br><span class=\"line\">inner join</span><br><span class=\"line\">\temp b</span><br><span class=\"line\">on</span><br><span class=\"line\">\ta.mgr = b.empno;</span><br><span class=\"line\"></span><br><span class=\"line\">+--------+--------+</span><br><span class=\"line\">| 员工名 | 领导名 |</span><br><span class=\"line\">+--------+--------+</span><br><span class=\"line\">| SMITH  | FORD   |</span><br><span class=\"line\">| ALLEN  | BLAKE  |</span><br><span class=\"line\">| WARD   | BLAKE  |</span><br><span class=\"line\">| JONES  | KING   |</span><br><span class=\"line\">| MARTIN | BLAKE  |</span><br><span class=\"line\">| BLAKE  | KING   |</span><br><span class=\"line\">| CLARK  | KING   |</span><br><span class=\"line\">| SCOTT  | JONES  |</span><br><span class=\"line\">| TURNER | BLAKE  |</span><br><span class=\"line\">| ADAMS  | SCOTT  |</span><br><span class=\"line\">| JAMES  | BLAKE  |</span><br><span class=\"line\">| FORD   | JONES  |</span><br><span class=\"line\">| MILLER | CLARK  |</span><br><span class=\"line\">+--------+--------+</span><br></pre></td></tr></table></figure>\n<p>2.8、外连接？</p>\n<p>什么是外连接，和内连接有什么区别？</p>\n<pre><code>内连接：\n\t假设A和B表进行连接，使用内连接的话，凡是A表和B表能够匹配上的记录查询出来，这就是内连接。\n\tAB两张表没有主副之分，两张表是平等的。\n\n外连接：\n\t假设A和B表进行连接，使用外连接的话，AB两张表中有一张表是主表，一张表是副表，主要查询主表中\n\t的数据，捎带着查询副表，当副表中的数据没有和主表中的数据匹配上，副表自动模拟出NULL与之匹配。\n\n外连接的分类？\n\t左外连接（左连接）：表示左边的这张表是主表。\n\t右外连接（右连接）：表示右边的这张表是主表。\n\n\t左连接有右连接的写法，右连接也会有对应的左连接的写法。\n</code></pre>\n<p>案例：找出每个员工的上级领导？（所有员工必须全部查询出来。）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">emp a 员工表</span><br><span class=\"line\">+-------+--------+------+</span><br><span class=\"line\">| empno | ename  | mgr  |</span><br><span class=\"line\">+-------+--------+------+</span><br><span class=\"line\">|  7369 | SMITH  | 7902 |</span><br><span class=\"line\">|  7499 | ALLEN  | 7698 |</span><br><span class=\"line\">|  7521 | WARD   | 7698 |</span><br><span class=\"line\">|  7566 | JONES  | 7839 |</span><br><span class=\"line\">|  7654 | MARTIN | 7698 |</span><br><span class=\"line\">|  7698 | BLAKE  | 7839 |</span><br><span class=\"line\">|  7782 | CLARK  | 7839 |</span><br><span class=\"line\">|  7788 | SCOTT  | 7566 |</span><br><span class=\"line\">|  7839 | KING   | NULL |</span><br><span class=\"line\">|  7844 | TURNER | 7698 |</span><br><span class=\"line\">|  7876 | ADAMS  | 7788 |</span><br><span class=\"line\">|  7900 | JAMES  | 7698 |</span><br><span class=\"line\">|  7902 | FORD   | 7566 |</span><br><span class=\"line\">|  7934 | MILLER | 7782 |</span><br><span class=\"line\">+-------+--------+------+</span><br><span class=\"line\">emp b 领导表</span><br><span class=\"line\">+-------+--------+</span><br><span class=\"line\">| empno | ename  |</span><br><span class=\"line\">+-------+--------+</span><br><span class=\"line\">|  7566 | JONES  |</span><br><span class=\"line\">|  7698 | BLAKE  |</span><br><span class=\"line\">|  7782 | CLARK  |</span><br><span class=\"line\">|  7788 | SCOTT  |</span><br><span class=\"line\">|  7839 | KING   |</span><br><span class=\"line\">|  7902 | FORD   |</span><br><span class=\"line\">+-------+--------+</span><br></pre></td></tr></table></figure>\n<p>内连接：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select </span><br><span class=\"line\">\ta.ename &#x27;员工&#x27;, b.ename &#x27;领导&#x27;</span><br><span class=\"line\">from</span><br><span class=\"line\">\temp a</span><br><span class=\"line\">join</span><br><span class=\"line\">\temp b</span><br><span class=\"line\">on</span><br><span class=\"line\">\ta.mgr = b.empno;</span><br><span class=\"line\"></span><br><span class=\"line\">外连接：（左外连接/左连接）</span><br><span class=\"line\">select </span><br><span class=\"line\">\ta.ename &#x27;员工&#x27;, b.ename &#x27;领导&#x27;</span><br><span class=\"line\">from</span><br><span class=\"line\">\temp a</span><br><span class=\"line\">left join</span><br><span class=\"line\">\temp b</span><br><span class=\"line\">on</span><br><span class=\"line\">\ta.mgr = b.empno;</span><br><span class=\"line\"></span><br><span class=\"line\">// outer是可以省略的。</span><br><span class=\"line\">select </span><br><span class=\"line\">\ta.ename &#x27;员工&#x27;, b.ename &#x27;领导&#x27;</span><br><span class=\"line\">from</span><br><span class=\"line\">\temp a</span><br><span class=\"line\">left outer join</span><br><span class=\"line\">\temp b</span><br><span class=\"line\">on</span><br><span class=\"line\">\ta.mgr = b.empno;</span><br><span class=\"line\"></span><br><span class=\"line\">外连接：（右外连接/右连接）</span><br><span class=\"line\">select </span><br><span class=\"line\">\ta.ename &#x27;员工&#x27;, b.ename &#x27;领导&#x27;</span><br><span class=\"line\">from</span><br><span class=\"line\">\temp b</span><br><span class=\"line\">right join</span><br><span class=\"line\">\temp a</span><br><span class=\"line\">on</span><br><span class=\"line\">\ta.mgr = b.empno;</span><br><span class=\"line\"></span><br><span class=\"line\">// outer可以省略。</span><br><span class=\"line\">select </span><br><span class=\"line\">\ta.ename &#x27;员工&#x27;, b.ename &#x27;领导&#x27;</span><br><span class=\"line\">from</span><br><span class=\"line\">\temp b</span><br><span class=\"line\">right outer join</span><br><span class=\"line\">\temp a</span><br><span class=\"line\">on</span><br><span class=\"line\">\ta.mgr = b.empno;</span><br><span class=\"line\"></span><br><span class=\"line\">+--------+-------+</span><br><span class=\"line\">| 员工      | 领导    |</span><br><span class=\"line\">+--------+-------+</span><br><span class=\"line\">| SMITH  | FORD  |</span><br><span class=\"line\">| ALLEN  | BLAKE |</span><br><span class=\"line\">| WARD   | BLAKE |</span><br><span class=\"line\">| JONES  | KING  |</span><br><span class=\"line\">| MARTIN | BLAKE |</span><br><span class=\"line\">| BLAKE  | KING  |</span><br><span class=\"line\">| CLARK  | KING  |</span><br><span class=\"line\">| SCOTT  | JONES |</span><br><span class=\"line\">| KING   | NULL  |</span><br><span class=\"line\">| TURNER | BLAKE |</span><br><span class=\"line\">| ADAMS  | SCOTT |</span><br><span class=\"line\">| JAMES  | BLAKE |</span><br><span class=\"line\">| FORD   | JONES |</span><br><span class=\"line\">| MILLER | CLARK |</span><br><span class=\"line\">+--------+-------+</span><br></pre></td></tr></table></figure>\n<p>外连接最重要的特点是：主表的数据无条件的全部查询出来。</p>\n<p>案例：找出哪个部门没有员工？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EMP表</span><br><span class=\"line\">+-------+--------+-----------+------+------------+---------+---------+--------+</span><br><span class=\"line\">| EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |</span><br><span class=\"line\">+-------+--------+-----------+------+------------+---------+---------+--------+</span><br><span class=\"line\">|  7369 | SMITH  | CLERK     | 7902 | 1980-12-17 |  800.00 |    NULL |     20 |</span><br><span class=\"line\">|  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |</span><br><span class=\"line\">|  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |</span><br><span class=\"line\">|  7566 | JONES  | MANAGER   | 7839 | 1981-04-02 | 2975.00 |    NULL |     20 |</span><br><span class=\"line\">|  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |</span><br><span class=\"line\">|  7698 | BLAKE  | MANAGER   | 7839 | 1981-05-01 | 2850.00 |    NULL |     30 |</span><br><span class=\"line\">|  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |    NULL |     10 |</span><br><span class=\"line\">|  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |    NULL |     20 |</span><br><span class=\"line\">|  7839 | KING   | PRESIDENT | NULL | 1981-11-17 | 5000.00 |    NULL |     10 |</span><br><span class=\"line\">|  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |</span><br><span class=\"line\">|  7876 | ADAMS  | CLERK     | 7788 | 1987-05-23 | 1100.00 |    NULL |     20 |</span><br><span class=\"line\">|  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950.00 |    NULL |     30 |</span><br><span class=\"line\">|  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |    NULL |     20 |</span><br><span class=\"line\">|  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300.00 |    NULL |     10 |</span><br><span class=\"line\">+-------+--------+-----------+------+------------+---------+---------+--------+</span><br><span class=\"line\">DEPT</span><br><span class=\"line\">+--------+------------+----------+</span><br><span class=\"line\">| DEPTNO | DNAME      | LOC      |</span><br><span class=\"line\">+--------+------------+----------+</span><br><span class=\"line\">|     10 | ACCOUNTING | NEW YORK |</span><br><span class=\"line\">|     20 | RESEARCH   | DALLAS   |</span><br><span class=\"line\">|     30 | SALES      | CHICAGO  |</span><br><span class=\"line\">|     40 | OPERATIONS | BOSTON   |</span><br><span class=\"line\">+--------+------------+----------+</span><br><span class=\"line\"></span><br><span class=\"line\">select </span><br><span class=\"line\">\td.*</span><br><span class=\"line\">from</span><br><span class=\"line\">\temp e</span><br><span class=\"line\">right join</span><br><span class=\"line\">\tdept d</span><br><span class=\"line\">on</span><br><span class=\"line\">\te.deptno = d.deptno</span><br><span class=\"line\">where</span><br><span class=\"line\">\te.empno is null;</span><br><span class=\"line\"></span><br><span class=\"line\">+--------+------------+--------+</span><br><span class=\"line\">| DEPTNO | DNAME      | LOC    |</span><br><span class=\"line\">+--------+------------+--------+</span><br><span class=\"line\">|     40 | OPERATIONS | BOSTON |</span><br><span class=\"line\">+--------+------------+--------+</span><br><span class=\"line\"></span><br><span class=\"line\">2.9、三张表怎么连接查询？</span><br><span class=\"line\">案例：找出每一个员工的部门名称以及工资等级。</span><br><span class=\"line\">EMP e</span><br><span class=\"line\">+-------+--------+---------+--------+</span><br><span class=\"line\">| empno | ename  | sal     | deptno |</span><br><span class=\"line\">+-------+--------+---------+--------+</span><br><span class=\"line\">|  7369 | SMITH  |  800.00 |     20 |</span><br><span class=\"line\">|  7499 | ALLEN  | 1600.00 |     30 |</span><br><span class=\"line\">|  7521 | WARD   | 1250.00 |     30 |</span><br><span class=\"line\">|  7566 | JONES  | 2975.00 |     20 |</span><br><span class=\"line\">|  7654 | MARTIN | 1250.00 |     30 |</span><br><span class=\"line\">|  7698 | BLAKE  | 2850.00 |     30 |</span><br><span class=\"line\">|  7782 | CLARK  | 2450.00 |     10 |</span><br><span class=\"line\">|  7788 | SCOTT  | 3000.00 |     20 |</span><br><span class=\"line\">|  7839 | KING   | 5000.00 |     10 |</span><br><span class=\"line\">|  7844 | TURNER | 1500.00 |     30 |</span><br><span class=\"line\">|  7876 | ADAMS  | 1100.00 |     20 |</span><br><span class=\"line\">|  7900 | JAMES  |  950.00 |     30 |</span><br><span class=\"line\">|  7902 | FORD   | 3000.00 |     20 |</span><br><span class=\"line\">|  7934 | MILLER | 1300.00 |     10 |</span><br><span class=\"line\">+-------+--------+---------+--------+</span><br><span class=\"line\">DEPT d</span><br><span class=\"line\">+--------+------------+----------+</span><br><span class=\"line\">| DEPTNO | DNAME      | LOC      |</span><br><span class=\"line\">+--------+------------+----------+</span><br><span class=\"line\">|     10 | ACCOUNTING | NEW YORK |</span><br><span class=\"line\">|     20 | RESEARCH   | DALLAS   |</span><br><span class=\"line\">|     30 | SALES      | CHICAGO  |</span><br><span class=\"line\">|     40 | OPERATIONS | BOSTON   |</span><br><span class=\"line\">+--------+------------+----------+</span><br><span class=\"line\">SALGRADE s</span><br><span class=\"line\">+-------+-------+-------+</span><br><span class=\"line\">| GRADE | LOSAL | HISAL |</span><br><span class=\"line\">+-------+-------+-------+</span><br><span class=\"line\">|     1 |   700 |  1200 |</span><br><span class=\"line\">|     2 |  1201 |  1400 |</span><br><span class=\"line\">|     3 |  1401 |  2000 |</span><br><span class=\"line\">|     4 |  2001 |  3000 |</span><br><span class=\"line\">|     5 |  3001 |  9999 |</span><br><span class=\"line\">+-------+-------+-------+</span><br><span class=\"line\"></span><br><span class=\"line\">注意，解释一下：</span><br><span class=\"line\">\t....</span><br><span class=\"line\">\t\tA</span><br><span class=\"line\">\tjoin</span><br><span class=\"line\">\t\tB</span><br><span class=\"line\">\tjoin</span><br><span class=\"line\">\t\tC</span><br><span class=\"line\">\ton</span><br><span class=\"line\">\t\t...</span><br></pre></td></tr></table></figure>\n<pre><code>表示：A表和B表先进行表连接，连接之后A表继续和C表进行连接。\n\nselect \n\te.ename,d.dname,s.grade\nfrom\n\temp e\njoin\n\tdept d\non\n\te.deptno = d.deptno\njoin\n\tsalgrade s\non\n\te.sal between s.losal and s.hisal;\n\n+--------+------------+-------+\n| ename  | dname      | grade |\n+--------+------------+-------+\n| SMITH  | RESEARCH   |     1 |\n| ALLEN  | SALES      |     3 |\n| WARD   | SALES      |     2 |\n| JONES  | RESEARCH   |     4 |\n| MARTIN | SALES      |     2 |\n| BLAKE  | SALES      |     4 |\n| CLARK  | ACCOUNTING |     4 |\n| SCOTT  | RESEARCH   |     4 |\n| KING   | ACCOUNTING |     5 |\n| TURNER | SALES      |     3 |\n| ADAMS  | RESEARCH   |     1 |\n| JAMES  | SALES      |     1 |\n| FORD   | RESEARCH   |     4 |\n| MILLER | ACCOUNTING |     2 |\n+--------+------------+-------+\n</code></pre>\n<p>案例：找出每一个员工的部门名称、工资等级、以及上级领导。</p>\n<pre><code>\tselect \n\t\te.ename '员工',d.dname,s.grade,e1.ename '领导'\n\tfrom\n\t\temp e\n\tjoin\n\t\tdept d\n\ton\n\t\te.deptno = d.deptno\n\tjoin\n\t\tsalgrade s\n\ton\n\t\te.sal between s.losal and s.hisal\n\tleft join\n\t\temp e1\n\ton\n\t\te.mgr = e1.empno;\n+--------+------------+-------+-------+\n| 员工      | dname      | grade | 领导    |\n+--------+------------+-------+-------+\n| SMITH  | RESEARCH   |     1 | FORD  |\n| ALLEN  | SALES      |     3 | BLAKE |\n| WARD   | SALES      |     2 | BLAKE |\n| JONES  | RESEARCH   |     4 | KING  |\n| MARTIN | SALES      |     2 | BLAKE |\n| BLAKE  | SALES      |     4 | KING  |\n| CLARK  | ACCOUNTING |     4 | KING  |\n| SCOTT  | RESEARCH   |     4 | JONES |\n| KING   | ACCOUNTING |     5 | NULL  |\n| TURNER | SALES      |     3 | BLAKE |\n| ADAMS  | RESEARCH   |     1 | SCOTT |\n| JAMES  | SALES      |     1 | BLAKE |\n| FORD   | RESEARCH   |     4 | JONES |\n| MILLER | ACCOUNTING |     2 | CLARK |\n+--------+------------+-------+-------+\n</code></pre>\n<p>3、子查询</p>\n<p>3.1、什么是子查询？子查询都可以出现在哪里？<br>\nselect语句当中嵌套select语句，被嵌套的select语句是子查询。<br>\n子查询可以出现在哪里？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select</span><br><span class=\"line\">\t..(select).</span><br><span class=\"line\">from</span><br><span class=\"line\">\t..(select).</span><br><span class=\"line\">where</span><br><span class=\"line\">\t..(select).</span><br></pre></td></tr></table></figure>\n<p>3.2、where子句中使用子查询</p>\n<p>案例：找出高于平均薪资的员工信息。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from emp where sal &gt; avg(sal); //错误的写法，where后面不能直接使用分组函数。</span><br><span class=\"line\"></span><br><span class=\"line\">第一步：找出平均薪资</span><br><span class=\"line\">\tselect avg(sal) from emp;</span><br><span class=\"line\">\t+-------------+</span><br><span class=\"line\">\t| avg(sal)    |</span><br><span class=\"line\">\t+-------------+</span><br><span class=\"line\">\t| 2073.214286 |</span><br><span class=\"line\">\t+-------------+</span><br><span class=\"line\">第二步：where过滤</span><br><span class=\"line\">\tselect * from emp where sal &gt; 2073.214286;</span><br><span class=\"line\">\t+-------+-------+-----------+------+------------+---------+------+--------+</span><br><span class=\"line\">\t| EMPNO | ENAME | JOB       | MGR  | HIREDATE   | SAL     | COMM | DEPTNO |</span><br><span class=\"line\">\t+-------+-------+-----------+------+------------+---------+------+--------+</span><br><span class=\"line\">\t|  7566 | JONES | MANAGER   | 7839 | 1981-04-02 | 2975.00 | NULL |     20 |</span><br><span class=\"line\">\t|  7698 | BLAKE | MANAGER   | 7839 | 1981-05-01 | 2850.00 | NULL |     30 |</span><br><span class=\"line\">\t|  7782 | CLARK | MANAGER   | 7839 | 1981-06-09 | 2450.00 | NULL |     10 |</span><br><span class=\"line\">\t|  7788 | SCOTT | ANALYST   | 7566 | 1987-04-19 | 3000.00 | NULL |     20 |</span><br><span class=\"line\">\t|  7839 | KING  | PRESIDENT | NULL | 1981-11-17 | 5000.00 | NULL |     10 |</span><br><span class=\"line\">\t|  7902 | FORD  | ANALYST   | 7566 | 1981-12-03 | 3000.00 | NULL |     20 |</span><br><span class=\"line\">\t+-------+-------+-----------+------+------------+---------+------+--------+</span><br><span class=\"line\">第一步和第二步合并：</span><br><span class=\"line\">\tselect * from emp where sal &gt; (select avg(sal) from emp);</span><br></pre></td></tr></table></figure>\n<p>3.3、from后面嵌套子查询</p>\n<p>案例：找出每个部门平均薪水的等级。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一步：找出每个部门平均薪水（按照部门编号分组，求sal的平均值）</span><br><span class=\"line\">select deptno,avg(sal) as avgsal from emp group by deptno;</span><br><span class=\"line\">+--------+-------------+</span><br><span class=\"line\">| deptno | avgsal      |</span><br><span class=\"line\">+--------+-------------+</span><br><span class=\"line\">|     10 | 2916.666667 |</span><br><span class=\"line\">|     20 | 2175.000000 |</span><br><span class=\"line\">|     30 | 1566.666667 |</span><br><span class=\"line\">+--------+-------------+</span><br><span class=\"line\">第二步：将以上的查询结果当做临时表t，让t表和salgrade s表连接，条件是：t.avgsal between s.losal and s.hisal</span><br><span class=\"line\">select </span><br><span class=\"line\">\tt.*,s.grade</span><br><span class=\"line\">from</span><br><span class=\"line\">\t(select deptno,avg(sal) as avgsal from emp group by deptno) t</span><br><span class=\"line\">join</span><br><span class=\"line\">\tsalgrade s</span><br><span class=\"line\">on</span><br><span class=\"line\">\tt.avgsal between s.losal and s.hisal;</span><br><span class=\"line\"></span><br><span class=\"line\">+--------+-------------+-------+</span><br><span class=\"line\">| deptno | avgsal      | grade |</span><br><span class=\"line\">+--------+-------------+-------+</span><br><span class=\"line\">|     30 | 1566.666667 |     3 |</span><br><span class=\"line\">|     10 | 2916.666667 |     4 |</span><br><span class=\"line\">|     20 | 2175.000000 |     4 |</span><br><span class=\"line\">+--------+-------------+-------+</span><br></pre></td></tr></table></figure>\n<p>案例：找出每个部门平均的薪水等级。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一步：找出每个员工的薪水等级。</span><br><span class=\"line\">select e.ename,e.sal,e.deptno,s.grade from emp e join salgrade s on e.sal between s.losal and s.hisal;</span><br><span class=\"line\">+--------+---------+--------+-------+</span><br><span class=\"line\">| ename  | sal     | deptno | grade |</span><br><span class=\"line\">+--------+---------+--------+-------+</span><br><span class=\"line\">| SMITH  |  800.00 |     20 |     1 |</span><br><span class=\"line\">| ALLEN  | 1600.00 |     30 |     3 |</span><br><span class=\"line\">| WARD   | 1250.00 |     30 |     2 |</span><br><span class=\"line\">| JONES  | 2975.00 |     20 |     4 |</span><br><span class=\"line\">| MARTIN | 1250.00 |     30 |     2 |</span><br><span class=\"line\">| BLAKE  | 2850.00 |     30 |     4 |</span><br><span class=\"line\">| CLARK  | 2450.00 |     10 |     4 |</span><br><span class=\"line\">| SCOTT  | 3000.00 |     20 |     4 |</span><br><span class=\"line\">| KING   | 5000.00 |     10 |     5 |</span><br><span class=\"line\">| TURNER | 1500.00 |     30 |     3 |</span><br><span class=\"line\">| ADAMS  | 1100.00 |     20 |     1 |</span><br><span class=\"line\">| JAMES  |  950.00 |     30 |     1 |</span><br><span class=\"line\">| FORD   | 3000.00 |     20 |     4 |</span><br><span class=\"line\">| MILLER | 1300.00 |     10 |     2 |</span><br><span class=\"line\">+--------+---------+--------+-------+</span><br><span class=\"line\">第二步：基于以上结果，继续按照deptno分组，求grade平均值。</span><br><span class=\"line\">select </span><br><span class=\"line\">\te.deptno,avg(s.grade)</span><br><span class=\"line\">from </span><br><span class=\"line\">\temp e </span><br><span class=\"line\">join </span><br><span class=\"line\">\tsalgrade s </span><br><span class=\"line\">on </span><br><span class=\"line\">\te.sal between s.losal and s.hisal</span><br><span class=\"line\">group by</span><br><span class=\"line\">\te.deptno;</span><br><span class=\"line\"></span><br><span class=\"line\">+--------+--------------+</span><br><span class=\"line\">| deptno | avg(s.grade) |</span><br><span class=\"line\">+--------+--------------+</span><br><span class=\"line\">|     10 |       3.6667 |</span><br><span class=\"line\">|     20 |       2.8000 |</span><br><span class=\"line\">|     30 |       2.5000 |</span><br><span class=\"line\">+--------+--------------+</span><br></pre></td></tr></table></figure>\n<p>3.4、在select后面嵌套子查询。<br>\n案例：找出每个员工所在的部门名称，要求显示员工名和部门名。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select </span><br><span class=\"line\">\te.ename,d.dname</span><br><span class=\"line\">from</span><br><span class=\"line\">\temp e</span><br><span class=\"line\">join</span><br><span class=\"line\">\tdept d</span><br><span class=\"line\">on</span><br><span class=\"line\">\te.deptno = d.deptno;</span><br><span class=\"line\"></span><br><span class=\"line\">select </span><br><span class=\"line\">\te.ename,(select d.dname from dept d where e.deptno = d.deptno) as dname </span><br><span class=\"line\">from </span><br><span class=\"line\">\temp e;</span><br><span class=\"line\"></span><br><span class=\"line\">+--------+------------+</span><br><span class=\"line\">| ename  | dname      |</span><br><span class=\"line\">+--------+------------+</span><br><span class=\"line\">| SMITH  | RESEARCH   |</span><br><span class=\"line\">| ALLEN  | SALES      |</span><br><span class=\"line\">| WARD   | SALES      |</span><br><span class=\"line\">| JONES  | RESEARCH   |</span><br><span class=\"line\">| MARTIN | SALES      |</span><br><span class=\"line\">| BLAKE  | SALES      |</span><br><span class=\"line\">| CLARK  | ACCOUNTING |</span><br><span class=\"line\">| SCOTT  | RESEARCH   |</span><br><span class=\"line\">| KING   | ACCOUNTING |</span><br><span class=\"line\">| TURNER | SALES      |</span><br><span class=\"line\">| ADAMS  | RESEARCH   |</span><br><span class=\"line\">| JAMES  | SALES      |</span><br><span class=\"line\">| FORD   | RESEARCH   |</span><br><span class=\"line\">| MILLER | ACCOUNTING |</span><br><span class=\"line\">+--------+------------+</span><br></pre></td></tr></table></figure>\n<p>4、union （可以将查询结果集相加）</p>\n<p>案例：找出工作岗位是SALESMAN和MANAGER的员工？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一种：select ename,job from emp where job = &#x27;MANAGER&#x27; or job = &#x27;SALESMAN&#x27;;</span><br><span class=\"line\">第二种：select ename,job from emp where job in(&#x27;MANAGER&#x27;,&#x27;SALESMAN&#x27;);</span><br><span class=\"line\">+--------+----------+</span><br><span class=\"line\">| ename  | job      |</span><br><span class=\"line\">+--------+----------+</span><br><span class=\"line\">| ALLEN  | SALESMAN |</span><br><span class=\"line\">| WARD   | SALESMAN |</span><br><span class=\"line\">| JONES  | MANAGER  |</span><br><span class=\"line\">| MARTIN | SALESMAN |</span><br><span class=\"line\">| BLAKE  | MANAGER  |</span><br><span class=\"line\">| CLARK  | MANAGER  |</span><br><span class=\"line\">| TURNER | SALESMAN |</span><br><span class=\"line\">+--------+----------+</span><br><span class=\"line\">第三种：union</span><br><span class=\"line\">select ename,job from emp where job = &#x27;MANAGER&#x27;</span><br><span class=\"line\">union</span><br><span class=\"line\">select ename,job from emp where job = &#x27;SALESMAN&#x27;;</span><br><span class=\"line\">+--------+----------+</span><br><span class=\"line\">| ename  | job      |</span><br><span class=\"line\">+--------+----------+</span><br><span class=\"line\">| JONES  | MANAGER  |</span><br><span class=\"line\">| BLAKE  | MANAGER  |</span><br><span class=\"line\">| CLARK  | MANAGER  |</span><br><span class=\"line\">| ALLEN  | SALESMAN |</span><br><span class=\"line\">| WARD   | SALESMAN |</span><br><span class=\"line\">| MARTIN | SALESMAN |</span><br><span class=\"line\">| TURNER | SALESMAN |</span><br><span class=\"line\">+--------+----------+</span><br><span class=\"line\"></span><br><span class=\"line\">两张不相干的表中的数据拼接在一起显示？</span><br><span class=\"line\">select ename from emp</span><br><span class=\"line\">union</span><br><span class=\"line\">select dname from dept;</span><br><span class=\"line\"></span><br><span class=\"line\">+------------+</span><br><span class=\"line\">| ename      |</span><br><span class=\"line\">+------------+</span><br><span class=\"line\">| SMITH      |</span><br><span class=\"line\">| ALLEN      |</span><br><span class=\"line\">| WARD       |</span><br><span class=\"line\">| JONES      |</span><br><span class=\"line\">| MARTIN     |</span><br><span class=\"line\">| BLAKE      |</span><br><span class=\"line\">| CLARK      |</span><br><span class=\"line\">| SCOTT      |</span><br><span class=\"line\">| KING       |</span><br><span class=\"line\">| TURNER     |</span><br><span class=\"line\">| ADAMS      |</span><br><span class=\"line\">| JAMES      |</span><br><span class=\"line\">| FORD       |</span><br><span class=\"line\">| MILLER     |</span><br><span class=\"line\">| ACCOUNTING |</span><br><span class=\"line\">| RESEARCH   |</span><br><span class=\"line\">| SALES      |</span><br><span class=\"line\">| OPERATIONS |</span><br><span class=\"line\">+------------+</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select ename,sal from emp</span><br><span class=\"line\">    -&gt; union</span><br><span class=\"line\">    -&gt; select dname from dept;</span><br><span class=\"line\">ERROR 1222 (21000): The used SELECT statements have a different number of columns</span><br></pre></td></tr></table></figure>\n<p>5、limit (重点中的重点，以后分页查询全靠它了。)</p>\n<p>5.1、limit是mysql特有的，其他数据库中没有，不通用。（Oracle中有一个相同的机制，叫做rownum）</p>\n<p>5.2、limit取结果集中的部分数据，这时它的作用。</p>\n<p>5.3、语法机制：</p>\n<pre><code>limit startIndex, length\n\tstartIndex表示起始位置，从0开始，0表示第一条数据。\n\tlength表示取几个\n案例：取出工资前5名的员工（思路：降序取前5个）\n\tselect ename,sal from emp order by sal desc;\n\t取前5个：\n\t\tselect ename,sal from emp order by sal desc limit 0, 5;\n\t\tselect ename,sal from emp order by sal desc limit 5;\n</code></pre>\n<p>5.4、limit是sql语句最后执行的一个环节：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select\t\t\t5</span><br><span class=\"line\">\t...</span><br><span class=\"line\">from\t\t\t1</span><br><span class=\"line\">\t...\t\t</span><br><span class=\"line\">where\t\t\t2</span><br><span class=\"line\">\t...\t</span><br><span class=\"line\">group by\t\t3</span><br><span class=\"line\">\t...</span><br><span class=\"line\">having\t\t\t4</span><br><span class=\"line\">\t...</span><br><span class=\"line\">order by\t\t6\t</span><br><span class=\"line\">\t...</span><br><span class=\"line\">limit\t\t\t7</span><br><span class=\"line\">\t...;</span><br></pre></td></tr></table></figure>\n<p>5.5、案例：找出工资排名在第4到第9名的员工？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select ename,sal from emp order by sal desc limit 3,6;</span><br><span class=\"line\">+--------+---------+</span><br><span class=\"line\">| ename  | sal     |</span><br><span class=\"line\">+--------+---------+</span><br><span class=\"line\">| JONES  | 2975.00 |</span><br><span class=\"line\">| BLAKE  | 2850.00 |</span><br><span class=\"line\">| CLARK  | 2450.00 |</span><br><span class=\"line\">| ALLEN  | 1600.00 |</span><br><span class=\"line\">| TURNER | 1500.00 |</span><br><span class=\"line\">| MILLER | 1300.00 |</span><br><span class=\"line\">+--------+---------+</span><br></pre></td></tr></table></figure>\n<p>5.6、通用的标准分页sql？</p>\n<pre><code>每页显示3条记录：\n第1页：0, 3\n第2页：3, 3\n第3页：6, 3\n第4页：9, 3\n第5页：12, 3\n\n每页显示pageSize条记录：\n第pageNo页：(pageNo - 1) * pageSize, pageSize\n\npageSize是什么？是每页显示多少条记录\npageNo是什么？显示第几页\n\njava代码&#123;\n\tint pageNo = 2; // 页码是2\n\tint pageSize = 10; // 每页显示10条\nlimit (pageNo - 1) * pageSize, pageSize\n&#125;\n</code></pre>\n<p>6、创建表：</p>\n<pre><code>建表语句的语法格式：\n\tcreate table 表名(\n\t\t字段名1 数据类型,\n\t\t字段名2 数据类型,\n\t\t字段名3 数据类型,\n\t\t....\n\t);\n\n关于MySQL当中字段的数据类型？以下只说常见的\n\tint\t\t整数型(java中的int)\n\tbigint\t长整型(java中的long)\n\tfloat\t\t浮点型(java中的float double)\n\tchar\t\t定长字符串(String)\n\tvarchar\t可变长字符串(StringBuffer/StringBuilder)\n\tdate\t\t日期类型 （对应Java中的java.sql.Date类型）\n\tBLOB\t\t二进制大对象（存储图片、视频等流媒体信息） Binary Large OBject （对应java中的Object）\n\tCLOB\t\t字符大对象（存储较大文本，比如，可以存储4G的字符串。） Character Large OBject（对应java中的Object）\n\t......\n\nchar和varchar怎么选择？\n\t在实际的开发中，当某个字段中的数据长度不发生改变的时候，是定长的，例如：性别、生日等都是采用char。\n\t当一个字段的数据长度不确定，例如：简介、姓名等都是采用varchar。\n\nBLOB和CLOB类型的使用？\n\t电影表: t_movie\n\tid(int)\tname(varchar)\t\tplaytime(date/char)\t\thaibao(BLOB)\t\thistory(CLOB)\n\t----------------------------------------------------------------------------------------\n\t1\t\t\t蜘蛛侠\t\n\t2\n\t3\n\n表名在数据库当中一般建议以：t_或者tbl_开始。\n\n创建学生表：\n\t学生信息包括：\n\t\t学号、姓名、性别、班级编号、生日\n\t\t学号：bigint\n\t\t姓名：varchar\n\t\t性别：char\n\t\t班级编号：int\n\t\t生日：char\n\t\n\tcreate table t_student(\n\t\tno bigint,\n\t\tname varchar(255),\n\t\tsex char(1),\n\t\tclassno varchar(255),\n\t\tbirth char(10)\n\t);\n</code></pre>\n<p>7、insert语句插入数据</p>\n<pre><code>语法格式：\n\tinsert into 表名(字段名1,字段名2,字段名3,....) values(值1,值2,值3,....)\n\t要求：字段的数量和值的数量相同，并且数据类型要对应相同。\ninsert into t_student(no,name,sex,classno,birth) values(1,'zhangsan','1','gaosan1ban');\nERROR 1136 (21S01): Column count doesn't match value count at row 1\n\ninsert into t_student(no,name,sex,classno,birth) values(1,'zhangsan','1','gaosan1ban', '1950-10-12');\n\nmysql&gt; select * from t_student;\n+------+----------+------+------------+------------+\n| no   | name     | sex  | classno    | birth      |\n+------+----------+------+------------+------------+\n|    1 | zhangsan | 1    | gaosan1ban | 1950-10-12 |\n+------+----------+------+------------+------------+\n\ninsert into t_student(name,sex,classno,birth,no) values('lisi','1','gaosan1ban', '1950-10-12',2);\n\nmysql&gt; select * from t_student;\n+------+----------+------+------------+------------+\n| no   | name     | sex  | classno    | birth      |\n+------+----------+------+------------+------------+\n|    1 | zhangsan | 1    | gaosan1ban | 1950-10-12 |\n|    2 | lisi     | 1    | gaosan1ban | 1950-10-12 |\n+------+----------+------+------------+------------+\n\ninsert into t_student(name) values('wangwu'); // 除name字段之外，剩下的所有字段自动插入NULL。\nmysql&gt; select * from t_student;\n+------+----------+------+------------+------------+\n| no   | name     | sex  | classno    | birth      |\n+------+----------+------+------------+------------+\n|    1 | zhangsan | 1    | gaosan1ban | 1950-10-12 |\n|    2 | lisi     | 1    | gaosan1ban | 1950-10-12 |\n| NULL | wangwu   | NULL | NULL       | NULL       |\n+------+----------+------+------------+------------+\n\ninsert into t_student(no) values(3); \nmysql&gt; select * from t_student;\n+------+----------+------+------------+------------+\n| no   | name     | sex  | classno    | birth      |\n+------+----------+------+------------+------------+\n|    1 | zhangsan | 1    | gaosan1ban | 1950-10-12 |\n|    2 | lisi     | 1    | gaosan1ban | 1950-10-12 |\n| NULL | wangwu   | NULL | NULL       | NULL       |\n|    3 | NULL     | NULL | NULL       | NULL       |\n+------+----------+------+------------+------------+\n\ndrop table if exists t_student; // 当这个表存在的话删除。\ncreate table t_student(\n\tno bigint,\n\tname varchar(255),\n\tsex char(1) default 1,\n\tclassno varchar(255),\n\tbirth char(10)\n);\n\ninsert into t_student(name) values('zhangsan');\nmysql&gt; select * from t_student;\n+------+----------+------+---------+-------+\n| no   | name     | sex  | classno | birth |\n+------+----------+------+---------+-------+\n| NULL | zhangsan | 1    | NULL    | NULL  |\n+------+----------+------+---------+-------+\n\n需要注意的地方：\n\t当一条insert语句执行成功之后，表格当中必然会多一行记录。\n\t即使多的这一行记录当中某些字段是NULL，后期也没有办法在执行\n\tinsert语句插入数据了，只能使用update进行更新。\n\n// 字段可以省略不写，但是后面的value对数量和顺序都有要求。\ninsert into t_student values(1,'jack','0','gaosan2ban','1986-10-23');\nmysql&gt; select * from t_student;\n+------+----------+------+------------+------------+\n| no   | name     | sex  | classno    | birth      |\n+------+----------+------+------------+------------+\n| NULL | zhangsan | 1    | NULL       | NULL       |\n|    1 | jack     | 0    | gaosan2ban | 1986-10-23 |\n+------+----------+------+------------+------------+\n\ninsert into t_student values(1,'jack','0','gaosan2ban');\nERROR 1136 (21S01): Column count doesn't match value count at row 1\n\n// 一次插入多行数据\ninsert into t_student\n\t(no,name,sex,classno,birth) \nvalues\n\t(3,'rose','1','gaosi2ban','1952-12-14'),(4,'laotie','1','gaosi2ban','1955-12-14');\n\nmysql&gt; select * from t_student;\n+------+----------+------+------------+------------+\n| no   | name     | sex  | classno    | birth      |\n+------+----------+------+------------+------------+\n| NULL | zhangsan | 1    | NULL       | NULL       |\n|    1 | jack     | 0    | gaosan2ban | 1986-10-23 |\n|    3 | rose     | 1    | gaosi2ban  | 1952-12-14 |\n|    4 | laotie   | 1    | gaosi2ban  | 1955-12-14 |\n+------+----------+------+------------+------------+\n</code></pre>\n<p>8、表的复制</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：</span><br><span class=\"line\">\tcreate table 表名 as select语句;</span><br><span class=\"line\">\t将查询结果当做表创建出来。</span><br></pre></td></tr></table></figure>\n<p>9、将查询结果插入到一张表中？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; insert into dept1 select * from dept;</span><br><span class=\"line\">mysql&gt; select * from dept1;</span><br><span class=\"line\">+--------+------------+----------+</span><br><span class=\"line\">| DEPTNO | DNAME      | LOC      |</span><br><span class=\"line\">+--------+------------+----------+</span><br><span class=\"line\">|     10 | ACCOUNTING | NEW YORK |</span><br><span class=\"line\">|     20 | RESEARCH   | DALLAS   |</span><br><span class=\"line\">|     30 | SALES      | CHICAGO  |</span><br><span class=\"line\">|     40 | OPERATIONS | BOSTON   |</span><br><span class=\"line\">|     10 | ACCOUNTING | NEW YORK |</span><br><span class=\"line\">|     20 | RESEARCH   | DALLAS   |</span><br><span class=\"line\">|     30 | SALES      | CHICAGO  |</span><br><span class=\"line\">|     40 | OPERATIONS | BOSTON   |</span><br><span class=\"line\">+--------+------------+----------+</span><br></pre></td></tr></table></figure>\n<p>10、修改数据：update</p>\n<pre><code>语法格式：\n\tupdate 表名 set 字段名1=值1,字段名2=值2... where 条件;\n\n注意：没有条件整张表数据全部更新。\n\n案例：将部门10的LOC修改为SHANGHAI，将部门名称修改为RENSHIBU\nupdate dept1 set loc = 'SHANGHAI', dname = 'RENSHIBU' where deptno = 10;\nmysql&gt; select * from dept1;\n+--------+------------+----------+\n| DEPTNO | DNAME      | LOC      |\n+--------+------------+----------+\n|     10 | RENSHIBU   | SHANGHAI |\n|     20 | RESEARCH   | DALLAS   |\n|     30 | SALES      | CHICAGO  |\n|     40 | OPERATIONS | BOSTON   |\n|     10 | RENSHIBU   | SHANGHAI |\n|     20 | RESEARCH   | DALLAS   |\n|     30 | SALES      | CHICAGO  |\n|     40 | OPERATIONS | BOSTON   |\n+--------+------------+----------+\n\n更新所有记录\n\tupdate dept1 set loc = 'x', dname = 'y';\n\tmysql&gt; select * from dept1;\n\t+--------+-------+------+\n\t| DEPTNO | DNAME | LOC  |\n\t+--------+-------+------+\n\t|     10 | y     | x    |\n\t|     20 | y     | x    |\n\t|     30 | y     | x    |\n\t|     40 | y     | x    |\n\t|     10 | y     | x    |\n\t|     20 | y     | x    |\n\t|     30 | y     | x    |\n\t|     40 | y     | x    |\n\t+--------+-------+------+\n</code></pre>\n<p>11、删除数据？<br>\n语法格式：<br>\ndelete from 表名 where 条件;</p>\n<pre><code>语法格式：\n\t\tdelete from 表名 where 条件;\n注意：没有条件全部删除。\n\n删除10部门数据？\n\tdelete from dept1 where deptno = 10;\n\n删除所有记录？\n\tdelete from dept1;\n\n怎么删除大表中的数据？（重点）\n\ttruncate table 表名; // 表被截断，不可回滚。永久丢失。\n删除表？\n\tdrop table 表名; // 这个通用。\n\tdrop table if exists 表名; // oracle不支持这种写法。\n</code></pre>\n<p>12、对于表结构的修改，这里不讲了，大家使用工具完成即可，因为在实际开发中表一旦<br>\n设计好之后，对表结构的修改是很少的，修改表结构就是对之前的设计进行了否定，即使<br>\n需要修改表结构，我们也可以直接使用工具操作。修改表结构的语句不会出现在Java代码当中。<br>\n出现在java代码当中的sql包括：insert delete update select（这些都是表中的数据操作。）</p>\n<p>增删改查有一个术语：CRUD操作<br>\nCreate（增） Retrieve（检索） Update（修改） Delete（删除）</p>\n<p>13、约束(Constraint)</p>\n<p>13.1、什么是约束？常见的约束有哪些呢？<br>\n在创建表的时候，可以给表的字段添加相应的约束，添加约束的目的是为了保证表中数据的<br>\n合法性、有效性、完整性。<br>\n常见的约束有哪些呢？<br>\n非空约束(not null)：约束的字段不能为NULL<br>\n唯一约束(unique)：约束的字段不能重复<br>\n主键约束(primary key)：约束的字段既不能为NULL，也不能重复（简称PK）<br>\n外键约束(foreign key)：…（简称FK）<br>\n检查约束(check)：注意Oracle数据库有check约束，但是mysql没有，目前mysql不支持该约束。</p>\n<p>13.2、非空约束 not null</p>\n<pre><code>drop table if exists t_user;\ncreate table t_user(\n\tid int,\n\tusername varchar(255) not null,\n\tpassword varchar(255)\n);\ninsert into t_user(id,password) values(1,'123');\nERROR 1364 (HY000): Field 'username' doesn't have a default value\ninsert into t_user(id,username,password) values(1,'lisi','123');\n</code></pre>\n<h3 id=\"第三部分\">第三部分<a title=\"#第三部分\" href=\"#第三部分\"></a></h3>\n<p>1、约束</p>\n<p>1.1、唯一性约束（unique）</p>\n<pre><code>* 唯一约束修饰的字段具有唯一性，不能重复。但可以为NULL。\n* 案例：给某一列添加unique\n\tdrop table if exists t_user;\n\tcreate table t_user(\n\t\tid int,\n\t\tusername varchar(255) unique  // 列级约束\n\t);\n\tinsert into t_user values(1,'zhangsan');\n\tinsert into t_user values(2,'zhangsan');\n\tERROR 1062 (23000): Duplicate entry 'zhangsan' for key 'username'\n\n\tinsert into t_user(id) values(2);\n\tinsert into t_user(id) values(3);\n\tinsert into t_user(id) values(4);\n* 案例：给两个列或者多个列添加unique\n\tdrop table if exists t_user;\n\tcreate table t_user(\n\t\tid int, \n\t\tusercode varchar(255),\n\t\tusername varchar(255),\n\t\tunique(usercode,username) // 多个字段联合起来添加1个约束unique 【表级约束】\n\t);\n\n\tinsert into t_user values(1,'111','zs');\n\tinsert into t_user values(2,'111','ls');\n\tinsert into t_user values(3,'222','zs');\n\tselect * from t_user;\n\tinsert into t_user values(4,'111','zs');\n\tERROR 1062 (23000): Duplicate entry '111-zs' for key 'usercode'\n\n\tdrop table if exists t_user;\n\tcreate table t_user(\n\t\tid int, \n\t\tusercode varchar(255) unique,\n\t\tusername varchar(255) unique\n\t);\n\tinsert into t_user values(1,'111','zs');\n\tinsert into t_user values(2,'111','ls');\n\tERROR 1062 (23000): Duplicate entry '111' for key 'usercode'\n* 注意：not null约束只有列级约束。没有表级约束。\n</code></pre>\n<p>1.2、主键约束</p>\n<pre><code>* 怎么给一张表添加主键约束呢？\n\tdrop table if exists t_user;\n\tcreate table t_user(\n\t\tid int primary key,  // 列级约束\n\t\tusername varchar(255),\n\t\temail varchar(255)\n\t);\n\tinsert into t_user(id,username,email) values(1,'zs','zs@123.com');\n\tinsert into t_user(id,username,email) values(2,'ls','ls@123.com');\n\tinsert into t_user(id,username,email) values(3,'ww','ww@123.com');\n\tselect * from t_user;\n\t+----+----------+------------+\n\t| id | username | email      |\n\t+----+----------+------------+\n\t|  1 | zs       | zs@123.com |\n\t|  2 | ls       | ls@123.com |\n\t|  3 | ww       | ww@123.com |\n\t+----+----------+------------+\n\n\tinsert into t_user(id,username,email) values(1,'jack','jack@123.com');\n\tERROR 1062 (23000): Duplicate entry '1' for key 'PRIMARY'\n\n\tinsert into t_user(username,email) values('jack','jack@123.com');\n\tERROR 1364 (HY000): Field 'id' doesn't have a default value\n\t\n\t根据以上的测试得出：id是主键，因为添加了主键约束，主键字段中的数据不能为NULL，也不能重复。\n\t主键的特点：不能为NULL，也不能重复。\n\n* 主键相关的术语？\n\t主键约束 : primary key\n\t主键字段 : id字段添加primary key之后，id叫做主键字段\n\t主键值 : id字段中的每一个值都是主键值。\n\n* 主键有什么作用？\n\t- 表的设计三范式中有要求，第一范式就要求任何一张表都应该有主键。\n\t- 主键的作用：主键值是这行记录在这张表当中的唯一标识。（就像一个人的身份证号码一样。）\n\n* 主键的分类？\n\t根据主键字段的字段数量来划分：\n\t\t单一主键（推荐的，常用的。）\n\t\t复合主键(多个字段联合起来添加一个主键约束)（复合主键不建议使用，因为复合主键违背三范式。）\n\t根据主键性质来划分：\n\t\t自然主键：主键值最好就是一个和业务没有任何关系的自然数。（这种方式是推荐的）\n\t\t业务主键：主键值和系统的业务挂钩，例如：拿着银行卡的卡号做主键，拿着身份证号码作为主键。（不推荐用）\n\t\t\t\t\t  最好不要拿着和业务挂钩的字段作为主键。因为以后的业务一旦发生改变的时候，主键值可能也需要\n\t\t\t\t\t  随着发生变化，但有的时候没有办法变化，因为变化可能会导致主键值重复。\n\n* 一张表的主键约束只能有1个。（必须记住）\n\n* 使用表级约束方式定义主键：\n\tdrop table if exists t_user;\n\tcreate table t_user(\n\t\tid int,\n\t\tusername varchar(255),\n\t\tprimary key(id)\n\t);\n\tinsert into t_user(id,username) values(1,'zs');\n\tinsert into t_user(id,username) values(2,'ls');\n\tinsert into t_user(id,username) values(3,'ws');\n\tinsert into t_user(id,username) values(4,'cs');\n\tselect * from t_user;\n\n\tinsert into t_user(id,username) values(4,'cx');\n\tERROR 1062 (23000): Duplicate entry '4' for key 'PRIMARY'\n\n\t以下内容是演示以下复合主键，不需要掌握：\n\t\tdrop table if exists t_user;\n\t\tcreate table t_user(\n\t\t\tid int,\n\t\t\tusername varchar(255),\n\t\t\tpassword varchar(255),\n\t\t\tprimary key(id,username)\n\t\t);\n\t\tinsert .......\n\n* mysql提供主键值自增：（非常重要。）\n\tdrop table if exists t_user;\n\tcreate table t_user(\n\t\tid int primary key auto_increment, // id字段自动维护一个自增的数字，从1开始，以1递增。\n\t\tusername varchar(255)\n\t);\n\tinsert into t_user(username) values('a');\n\tinsert into t_user(username) values('b');\n\tinsert into t_user(username) values('c');\n\tinsert into t_user(username) values('d');\n\tinsert into t_user(username) values('e');\n\tinsert into t_user(username) values('f');\n\tselect * from t_user;\n\n\t提示:Oracle当中也提供了一个自增机制，叫做：序列（sequence）对象。\n</code></pre>\n<p>1.3、外键约束</p>\n<pre><code>* 关于外键约束的相关术语：\n\t外键约束: foreign key\n\t外键字段：添加有外键约束的字段\n\t外键值：外键字段中的每一个值。\n\n* 业务背景：\n\t请设计数据库表，用来维护学生和班级的信息？\n\t\t第一种方案：一张表存储所有数据\n\t\tno(pk)\t\t\tname\t\t\tclassno\t\t\tclassname\n\t\t-------------------------------------------------------------------------------------------\n\t\t1\t\t\t\t\tzs1\t\t\t\t101\t\t\t\t北京大兴区经济技术开发区亦庄二中高三1班\n\t\t2\t\t\t\t\tzs2\t\t\t\t101\t\t\t\t北京大兴区经济技术开发区亦庄二中高三1班\n\t\t3\t\t\t\t\tzs3\t\t\t\t102\t\t\t\t北京大兴区经济技术开发区亦庄二中高三2班\n\t\t4\t\t\t\t\tzs4\t\t\t\t102\t\t\t\t北京大兴区经济技术开发区亦庄二中高三2班\n\t\t5\t\t\t\t\tzs5\t\t\t\t102\t\t\t\t北京大兴区经济技术开发区亦庄二中高三2班\n\t\t缺点：冗余。【不推荐】\n\n\t\t第二种方案：两张表（班级表和学生表）\n\t\tt_class 班级表\n\t\tcno(pk)\t\tcname\n\t\t--------------------------------------------------------\n\t\t101\t\t北京大兴区经济技术开发区亦庄二中高三1班\n\t\t102\t\t北京大兴区经济技术开发区亦庄二中高三2班\n\n\t\tt_student 学生表\n\t\tsno(pk)\t\tsname\t\t\t\tclassno(该字段添加外键约束fk)\n\t\t------------------------------------------------------------\n\t\t1\t\t\t\tzs1\t\t\t\t101\n\t\t2\t\t\t\tzs2\t\t\t\t101\n\t\t3\t\t\t\tzs3\t\t\t\t102\n\t\t4\t\t\t\tzs4\t\t\t\t102\n\t\t5\t\t\t\tzs5\t\t\t\t102\n\t\n* 将以上表的建表语句写出来：\n\n\tt_student中的classno字段引用t_class表中的cno字段，此时t_student表叫做子表。t_class表叫做父表。\n\n\t顺序要求：\n\t\t删除数据的时候，先删除子表，再删除父表。\n\t\t添加数据的时候，先添加父表，在添加子表。\n\t\t创建表的时候，先创建父表，再创建子表。\n\t\t删除表的时候，先删除子表，在删除父表。\n\t\n\tdrop table if exists t_student;\n\tdrop table if exists t_class;\n\n\tcreate table t_class(\n\t\tcno int,\n\t\tcname varchar(255),\n\t\tprimary key(cno)\n\t);\n\n\tcreate table t_student(\n\t\tsno int,\n\t\tsname varchar(255),\n\t\tclassno int,\n\t\tprimary key(sno),\n\t\tforeign key(classno) references t_class(cno)\n\t);\n\n\tinsert into t_class values(101,'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx');\n\tinsert into t_class values(102,'yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy');\n\n\tinsert into t_student values(1,'zs1',101);\n\tinsert into t_student values(2,'zs2',101);\n\tinsert into t_student values(3,'zs3',102);\n\tinsert into t_student values(4,'zs4',102);\n\tinsert into t_student values(5,'zs5',102);\n\tinsert into t_student values(6,'zs6',102);\n\tselect * from t_class;\n\tselect * from t_student;\n\n\tinsert into t_student values(7,'lisi',103);\n\tERROR 1452 (23000): Cannot add or update a child row: a foreign key constraint fails (`bjpowernode`.INT `t_student_ibfk_1` FOREIGN KEY (`classno`) REFERENCES `t_class` (`cno`))\n\n* 外键值可以为NULL？\n\t外键可以为NULL。\n\n* 外键字段引用其他表的某个字段的时候，被引用的字段必须是主键吗？\n\t注意：被引用的字段不一定是主键，但至少具有unique约束。\n</code></pre>\n<p>2、存储引擎？（整个内容属于了解内容）</p>\n<pre><code>2.1、完整的建表语句\n\tCREATE TABLE `t_x` (\n\t  `id` int(11) DEFAULT NULL\n\t) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n\t注意：在MySQL当中，凡是标识符是可以使用飘号括起来的。最好别用，不通用。\n\n\t建表的时候可以指定存储引擎，也可以指定字符集。\n\n\tmysql默认使用的存储引擎是InnoDB方式。\n\t默认采用的字符集是UTF8\n\n2.2、什么是存储引擎呢？\n\t存储引擎这个名字只有在mysql中存在。（Oracle中有对应的机制，但是不叫做存储引擎。Oracle中没有特殊的名字，\n\t就是“表的存储方式”）\n\n\tmysql支持很多存储引擎，每一个存储引擎都对应了一种不同的存储方式。\n\t每一个存储引擎都有自己的优缺点，需要在合适的时机选择合适的存储引擎。\n\n2.3、查看当前mysql支持的存储引擎？\n\tshow engines \\G\n\n\tmysql 5.5.36版本支持的存储引擎有9个：\n\t\t*************************** 1. row ***************************\n\t\t\t\tEngine: FEDERATED\n\t\t\t  Support: NO\n\t\t\t  Comment: Federated MySQL storage engine\n\t\tTransactions: NULL\n\t\t\t\t\t XA: NULL\n\t\t  Savepoints: NULL\n\t\t*************************** 2. row ***************************\n\t\t\t\tEngine: MRG_MYISAM\n\t\t\t  Support: YES\n\t\t\t  Comment: Collection of identical MyISAM tables\n\t\tTransactions: NO\n\t\t\t\t\t XA: NO\n\t\t  Savepoints: NO\n\t\t*************************** 3. row ***************************\n\t\t\t\tEngine: MyISAM\n\t\t\t  Support: YES\n\t\t\t  Comment: MyISAM storage engine\n\t\tTransactions: NO\n\t\t\t\t\t XA: NO\n\t\t  Savepoints: NO\n\t\t*************************** 4. row ***************************\n\t\t\t\tEngine: BLACKHOLE\n\t\t\t  Support: YES\n\t\t\t  Comment: /dev/null storage engine (anything you write to it disappears)\n\t\tTransactions: NO\n\t\t\t\t\t XA: NO\n\t\t  Savepoints: NO\n\t\t*************************** 5. row ***************************\n\t\t\t\tEngine: CSV\n\t\t\t  Support: YES\n\t\t\t  Comment: CSV storage engine\n\t\tTransactions: NO\n\t\t\t\t\t XA: NO\n\t\t  Savepoints: NO\n\t\t*************************** 6. row ***************************\n\t\t\t\tEngine: MEMORY\n\t\t\t  Support: YES\n\t\t\t  Comment: Hash based, stored in memory, useful for temporary tables\n\t\tTransactions: NO\n\t\t\t\t\t XA: NO\n\t\t  Savepoints: NO\n\t\t*************************** 7. row ***************************\n\t\t\t\tEngine: ARCHIVE\n\t\t\t  Support: YES\n\t\t\t  Comment: Archive storage engine\n\t\tTransactions: NO\n\t\t\t\t\t XA: NO\n\t\t  Savepoints: NO\n\t\t*************************** 8. row ***************************\n\t\t\t\tEngine: InnoDB\n\t\t\t  Support: DEFAULT\n\t\t\t  Comment: Supports transactions, row-level locking, and foreign keys\n\t\tTransactions: YES\n\t\t\t\t\t XA: YES\n\t\t  Savepoints: YES\n\t\t*************************** 9. row ***************************\n\t\t\t\tEngine: PERFORMANCE_SCHEMA\n\t\t\t  Support: YES\n\t\t\t  Comment: Performance Schema\n\t\tTransactions: NO\n\t\t\t\t\t XA: NO\n\t\t  Savepoints: NO\n\n2.4、常见的存储引擎？\n\n\t\tEngine: MyISAM\n\t\t\t  Support: YES\n\t\t\t  Comment: MyISAM storage engine\n\t\tTransactions: NO\n\t\t\t\t\t XA: NO\n\t\t  Savepoints: NO\n\t\t\n\t\tMyISAM这种存储引擎不支持事务。\n\t\tMyISAM是mysql最常用的存储引擎，但是这种引擎不是默认的。\n\t\tMyISAM采用三个文件组织一张表：\n\t\t\txxx.frm（存储格式的文件）\n\t\t\txxx.MYD（存储表中数据的文件）\n\t\t\txxx.MYI（存储表中索引的文件）\n\t\t优点：可被压缩，节省存储空间。并且可以转换为只读表，提高检索效率。\n\t\t缺点：不支持事务。\n\n\t-----------------------------------------------------------------------------\n\n\t\t\t  Engine: InnoDB\n\t\t\t  Support: DEFAULT\n\t\t\t  Comment: Supports transactions, row-level locking, and foreign keys\n\t\tTransactions: YES\n\t\t\t\t\t XA: YES\n\t\t  Savepoints: YES\n\t\t\t\n\t\t优点：支持事务、行级锁、外键等。这种存储引擎数据的安全得到保障。\n\t\t\n\t\t表的结构存储在xxx.frm文件中\n\t\t数据存储在tablespace这样的表空间中（逻辑概念），无法被压缩，无法转换成只读。\n\t\t这种InnoDB存储引擎在MySQL数据库崩溃之后提供自动恢复机制。\n\t\tInnoDB支持级联删除和级联更新。\n\t\n\t-------------------------------------------------------------------------------------\n\n\t\t\t\tEngine: MEMORY\n\t\t\t  Support: YES\n\t\t\t  Comment: Hash based, stored in memory, useful for temporary tables\n\t\tTransactions: NO\n\t\t\t\t\t XA: NO\n\t\t  Savepoints: NO\n\t\t\n\t\t缺点：不支持事务。数据容易丢失。因为所有数据和索引都是存储在内存当中的。\n\t\t优点：查询速度最快。\n\t\t以前叫做HEPA引擎。\n</code></pre>\n<p>3、事务（Transaction）</p>\n<pre><code>3.1、什么是事务？\n\n\t一个事务是一个完整的业务逻辑单元，不可再分。\n\n\t比如：银行账户转账，从A账户向B账户转账10000.需要执行两条update语句：\n\t\tupdate t_act set balance = balance - 10000 where actno = 'act-001';\n\t\tupdate t_act set balance = balance + 10000 where actno = 'act-002';\n\t\n\t以上两条DML语句必须同时成功，或者同时失败，不允许出现一条成功，一条失败。\n\n\t要想保证以上的两条DML语句同时成功或者同时失败，那么就需要使用数据库的“事务机制”。\n\n3.2、和事务相关的语句只有：DML语句。（insert delete update）\n\t为什么？因为它们这三个语句都是和数据库表当中的“数据”相关的。\n\t事务的存在是为了保证数据的完整性，安全性。\n\n3.3、假设所有的业务都能使用1条DML语句搞定，还需要事务机制吗？\n\t不需要事务。\n\t但实际情况不是这样的，通常一个“事儿（事务【业务】）”需要多条DML语句共同联合完成。\n\n3.4、事务的特性？\n\t事务包括四大特性：ACID\n\tA: 原子性：事务是最小的工作单元，不可再分。\n\tC: 一致性：事务必须保证多条DML语句同时成功或者同时失败。\n\tI：隔离性：事务A与事务B之间具有隔离。\n\tD：持久性：持久性说的是最终数据必须持久化到硬盘文件中，事务才算成功的结束。\n\n3.5、关于事务之间的隔离性\n\t事务隔离性存在隔离级别，理论上隔离级别包括4个：\n\t\t第一级别：读未提交（read uncommitted）\n\t\t\t对方事务还没有提交，我们当前事务可以读取到对方未提交的数据。\n\t\t\t读未提交存在脏读（Dirty Read）现象：表示读到了脏的数据。\n\t\t第二级别：读已提交（read committed）\n\t\t\t对方事务提交之后的数据我方可以读取到。\n\t\t\t这种隔离级别解决了: 脏读现象没有了。\n\t\t\t读已提交存在的问题是：不可重复读。\n\t\t第三级别：可重复读（repeatable read）\n\t\t\t这种隔离级别解决了：不可重复读问题。\n\t\t\t这种隔离级别存在的问题是：读取到的数据是幻象。\n\t\t第四级别：序列化读/串行化读（serializable） \n\t\t\t解决了所有问题。\n\t\t\t效率低。需要事务排队。\n\t\t\n\t\toracle数据库默认的隔离级别是：读已提交。\n\t\tmysql数据库默认的隔离级别是：可重复读。\n\n3.6、演示事务\n\t* mysql事务默认情况下是自动提交的。\n\t\t（什么是自动提交？只要执行任意一条DML语句则提交一次。）怎么关闭自动提交？start transaction;\n\t\n\t* 准备表：\n\t\tdrop table if exists t_user;\n\t\tcreate table t_user(\n\t\t\tid int primary key auto_increment,\n\t\t\tusername varchar(255)\n\t\t);\n\t\n\t* 演示：mysql中的事务是支持自动提交的，只要执行一条DML，则提交一次。\n\t\tmysql&gt; insert into t_user(username) values('zs');\n\t\tQuery OK, 1 row affected (0.03 sec)\n\n\t\tmysql&gt; select * from t_user;\n\t\t+----+----------+\n\t\t| id | username |\n\t\t+----+----------+\n\t\t|  1 | zs       |\n\t\t+----+----------+\n\t\t1 row in set (0.00 sec)\n\n\t\tmysql&gt; rollback;\n\t\tQuery OK, 0 rows affected (0.00 sec)\n\n\t\tmysql&gt; select * from t_user;\n\t\t+----+----------+\n\t\t| id | username |\n\t\t+----+----------+\n\t\t|  1 | zs       |\n\t\t+----+----------+\n\t\t1 row in set (0.00 sec)\n\t\n\t* 演示：使用start transaction;关闭自动提交机制。\n\t\tmysql&gt; start transaction;\n\t\tQuery OK, 0 rows affected (0.00 sec)\n\n\t\tmysql&gt; insert into t_user(username) values('lisi');\n\t\tQuery OK, 1 row affected (0.00 sec)\n\n\t\tmysql&gt; select * from t_user;\n\t\t+----+----------+\n\t\t| id | username |\n\t\t+----+----------+\n\t\t|  1 | zs       |\n\t\t|  2 | lisi     |\n\t\t+----+----------+\n\t\t2 rows in set (0.00 sec)\n\n\t\tmysql&gt; insert into t_user(username) values('wangwu');\n\t\tQuery OK, 1 row affected (0.00 sec)\n\n\t\tmysql&gt; select * from t_user;\n\t\t+----+----------+\n\t\t| id | username |\n\t\t+----+----------+\n\t\t|  1 | zs       |\n\t\t|  2 | lisi     |\n\t\t|  3 | wangwu   |\n\t\t+----+----------+\n\t\t3 rows in set (0.00 sec)\n\n\t\tmysql&gt; rollback;\n\t\tQuery OK, 0 rows affected (0.02 sec)\n\n\t\tmysql&gt; select * from t_user;\n\t\t+----+----------+\n\t\t| id | username |\n\t\t+----+----------+\n\t\t|  1 | zs       |\n\t\t+----+----------+\n\t\t1 row in set (0.00 sec)\n\t\t--------------------------------------------------------------------\n\t\tmysql&gt; start transaction;\n\t\tQuery OK, 0 rows affected (0.00 sec)\n\n\t\tmysql&gt; insert into t_user(username) values('wangwu');\n\t\tQuery OK, 1 row affected (0.00 sec)\n\n\t\tmysql&gt; insert into t_user(username) values('rose');\n\t\tQuery OK, 1 row affected (0.00 sec)\n\n\t\tmysql&gt; insert into t_user(username) values('jack');\n\t\tQuery OK, 1 row affected (0.00 sec)\n\n\t\tmysql&gt; select * from t_user;\n\t\t+----+----------+\n\t\t| id | username |\n\t\t+----+----------+\n\t\t|  1 | zs       |\n\t\t|  4 | wangwu   |\n\t\t|  5 | rose     |\n\t\t|  6 | jack     |\n\t\t+----+----------+\n\t\t4 rows in set (0.00 sec)\n\n\t\tmysql&gt; commit;\n\t\tQuery OK, 0 rows affected (0.04 sec)\n\n\t\tmysql&gt; select * from t_user;\n\t\t+----+----------+\n\t\t| id | username |\n\t\t+----+----------+\n\t\t|  1 | zs       |\n\t\t|  4 | wangwu   |\n\t\t|  5 | rose     |\n\t\t|  6 | jack     |\n\t\t+----+----------+\n\t\t4 rows in set (0.00 sec)\n\n\t\tmysql&gt; rollback;\n\t\tQuery OK, 0 rows affected (0.00 sec)\n\n\t\tmysql&gt; select * from t_user;\n\t\t+----+----------+\n\t\t| id | username |\n\t\t+----+----------+\n\t\t|  1 | zs       |\n\t\t|  4 | wangwu   |\n\t\t|  5 | rose     |\n\t\t|  6 | jack     |\n\t\t+----+----------+\n\t\t4 rows in set (0.00 sec)\n\n\t* 演示两个事务，假如隔离级别\n\t\t演示第1级别：读未提交\n\t\t\tset global transaction isolation level read uncommitted;\n\t\t演示第2级别：读已提交\n\t\t\tset global transaction isolation level read committed;\n\t\t演示第3级别：可重复读\n\t\t\tset global transaction isolation level repeatable read;\n\t\t\n\t* mysql远程登录：mysql -h192.168.151.18 -uroot -p444\n</code></pre>\n<p>4、索引</p>\n<pre><code>4.1、什么是索引？有什么用？\n\t索引就相当于一本书的目录，通过目录可以快速的找到对应的资源。\n\t在数据库方面，查询一张表的时候有两种检索方式：\n\t\t第一种方式：全表扫描\n\t\t第二种方式：根据索引检索（效率很高）\n\n\t索引为什么可以提高检索效率呢？\n\t\t其实最根本的原理是缩小了扫描的范围。\n\t\n\t索引虽然可以提高检索效率，但是不能随意的添加索引，因为索引也是数据库当中\n\t的对象，也需要数据库不断的维护。是有维护成本的。比如，表中的数据经常被修改\n\t这样就不适合添加索引，因为数据一旦修改，索引需要重新排序，进行维护。\n\n\t添加索引是给某一个字段，或者说某些字段添加索引。\n\n\tselect ename,sal from emp where ename = 'SMITH';\n\t当ename字段上没有添加索引的时候，以上sql语句会进行全表扫描，扫描ename字段中所有的值。\n\t当ename字段上添加索引的时候，以上sql语句会根据索引扫描，快速定位。\n\n4.2、怎么创建索引对象？怎么删除索引对象？\n\t创建索引对象：\n\t\tcreate index 索引名称 on 表名(字段名);\n\t删除索引对象：\n\t\tdrop index 索引名称 on 表名;\n\n4.3、什么时候考虑给字段添加索引？（满足什么条件）\n\t* 数据量庞大。（根据客户的需求，根据线上的环境）\n\t* 该字段很少的DML操作。（因为字段进行修改操作，索引也需要维护）\n\t* 该字段经常出现在where子句中。（经常根据哪个字段查询）\n\n4.4、注意：主键和具有unique约束的字段自动会添加索引。\n\t根据主键查询效率较高。尽量根据主键检索。\n\n4.5、查看sql语句的执行计划：\nmysql&gt; explain select ename,sal from emp where sal = 5000;\n+----+-------------+-------+------+---------------+------+---------+------+------+\n| id | select_type | table | type | possible_keys | key  | key_len | ref  | rows |\n+----+-------------+-------+------+---------------+------+---------+------+------+\n|  1 | SIMPLE      | emp   | ALL  | NULL          | NULL | NULL    | NULL |   14 |\n+----+-------------+-------+------+---------------+------+---------+------+------+\n+-------------+\n| Extra       |\n+-------------+\n| Using where |\n+-------------+\n给薪资sal字段添加索引：\ncreate index emp_sal_index on emp(sal);\t\nmysql&gt; explain select ename,sal from emp where sal = 5000;\n+----+-------------+-------+------+---------------+---------------+---------+-------+\n| id | select_type | table | type | possible_keys | key           | key_len | ref   |\n+----+-------------+-------+------+---------------+---------------+---------+-------+\n|  1 | SIMPLE      | emp   | ref  | emp_sal_index | emp_sal_index | 9       | const |\n+----+-------------+-------+------+---------------+---------------+---------+-------+\n+------+-------------+\n| rows | Extra       |\n+------+-------------+\n|    1 | Using where |\n+------+-------------+\n4.6、索引底层采用的数据结构是：B + Tree\n\n4.7、索引的实现原理？\n\t通过B Tree缩小扫描范围，底层索引进行了排序，分区，索引会携带数据在表中的“物理地址”，\n\t最终通过索引检索到数据之后，获取到关联的物理地址，通过物理地址定位表中的数据，效率\n\t是最高的。\n\t\tselect ename from emp where ename = 'SMITH';\n\t\t通过索引转换为：\n\t\tselect ename from emp where 物理地址 = 0x3;\n\n4.8、索引的分类？\n\t单一索引：给单个字段添加索引\n\t复合索引: 给多个字段联合起来添加1个索引\n\t主键索引：主键上会自动添加索引\n\t唯一索引：有unique约束的字段上会自动添加索引\n\t....\n\n4.9、索引什么时候失效？\n\tselect ename from emp where ename like '%A%';\n\t模糊查询的时候，第一个通配符使用的是%，这个时候索引是失效的。\n</code></pre>\n<p>5、视图(view)</p>\n<pre><code>5.1、什么是视图？\n\t站在不同的角度去看到数据。（同一张表的数据，通过不同的角度去看待）。\n\n5.2、怎么创建视图？怎么删除视图？\n\tcreate view myview as select empno,ename from emp;\n\tdrop view myview;\n\n\t注意：只有DQL语句才能以视图对象的方式创建出来。\n\n5.3、对视图进行增删改查，会影响到原表数据。（通过视图影响原表数据的，不是直接操作的原表）\n可以对视图进行CRUD操作。\n\n5.4、面向视图操作？\n\tmysql&gt; select * from myview;\n\t+-------+--------+\n\t| empno | ename  |\n\t+-------+--------+\n\t|  7369 | SMITH  |\n\t|  7499 | ALLEN  |\n\t|  7521 | WARD   |\n\t|  7566 | JONES  |\n\t|  7654 | MARTIN |\n\t|  7698 | BLAKE  |\n\t|  7782 | CLARK  |\n\t|  7788 | SCOTT  |\n\t|  7839 | KING   |\n\t|  7844 | TURNER |\n\t|  7876 | ADAMS  |\n\t|  7900 | JAMES  |\n\t|  7902 | FORD   |\n\t|  7934 | MILLER |\n\t+-------+--------+\n\n\tcreate table emp_bak as select * from emp;\n\tcreate view myview1 as select empno,ename,sal from emp_bak;\n\tupdate myview1 set ename='hehe',sal=1 where empno = 7369; // 通过视图修改原表数据。\n\tdelete from myview1 where empno = 7369; // 通过视图删除原表数据。\n\n5.5、视图的作用？\n\t视图可以隐藏表的实现细节。保密级别较高的系统，数据库只对外提供相关的视图，java程序员\n\t只对视图对象进行CRUD。\n</code></pre>\n<p>6、DBA命令</p>\n<pre><code>6.1、将数据库当中的数据导出\n\t在windows的dos命令窗口中执行：（导出整个库）\n\t\tmysqldump bjpowernode&gt;D:\\bjpowernode.sql -uroot -p333\n\t\n\t在windows的dos命令窗口中执行：（导出指定数据库当中的指定表）\n\t\tmysqldump bjpowernode emp&gt;D:\\bjpowernode.sql -uroot –p123\n\n6.2、导入数据\n\tcreate database bjpowernode;\n\tuse bjpowernode;\n\tsource D:\\bjpowernode.sql\n</code></pre>\n<p>7、数据库设计三范式（重点内容，面试经常问）</p>\n<pre><code>7.1、什么是设计范式？\n\t设计表的依据。按照这个三范式设计的表不会出现数据冗余。\n\n7.2、三范式都是哪些？\n\n\t第一范式：任何一张表都应该有主键，并且每一个字段原子性不可再分。\n\n\t第二范式：建立在第一范式的基础之上，所有非主键字段完全依赖主键，不能产生部分依赖。\n\t\t多对多？三张表，关系表两个外键。\n\t\tt_student学生表\n\t\tsno(pk)\t\tsname\n\t\t-------------------\n\t\t1\t\t\t\t张三\n\t\t2\t\t\t\t李四\n\t\t3\t\t\t\t王五\n\n\t\tt_teacher 讲师表\n\t\ttno(pk)\t\ttname\n\t\t---------------------\n\t\t1\t\t\t\t王老师\n\t\t2\t\t\t\t张老师\n\t\t3\t\t\t\t李老师\n\n\t\tt_student_teacher_relation 学生讲师关系表\n\t\tid(pk)\t\tsno(fk)\t\ttno(fk)\n\t\t----------------------------------\n\t\t1\t\t\t\t1\t\t\t\t3\n\t\t2\t\t\t\t1\t\t\t\t1\n\t\t3\t\t\t\t2\t\t\t\t2\n\t\t4\t\t\t\t2\t\t\t\t3\n\t\t5\t\t\t\t3\t\t\t\t1\n\t\t6\t\t\t\t3\t\t\t\t3\n\t\n\t第三范式：建立在第二范式的基础之上，所有非主键字段直接依赖主键，不能产生传递依赖。\n\t\t一对多？两张表，多的表加外键。\n\t\t班级t_class\n\t\tcno(pk)\t\t\tcname\n\t\t--------------------------\n\t\t1\t\t\t\t\t班级1\n\t\t2\t\t\t\t\t班级2\n\n\t\t学生t_student\n\t\tsno(pk)\t\t\tsname\t\t\t\tclassno(fk)\n\t\t---------------------------------------------\n\t\t101\t\t\t\t张1\t\t\t\t1\n\t\t102\t\t\t\t张2\t\t\t\t1\n\t\t103\t\t\t\t张3\t\t\t\t2\n\t\t104\t\t\t\t张4\t\t\t\t2\n\t\t105\t\t\t\t张5\t\t\t\t2\n\t\n\t提醒：在实际的开发中，以满足客户的需求为主，有的时候会拿冗余换执行速度。\n\n7.3、一对一怎么设计？\n\n\t一对一设计有两种方案：主键共享\n\t\tt_user_login  用户登录表\n\t\tid(pk)\t\tusername\t\t\tpassword\n\t\t--------------------------------------\n\t\t1\t\t\t\tzs\t\t\t\t\t123\n\t\t2\t\t\t\tls\t\t\t\t\t456\n\n\t\tt_user_detail 用户详细信息表\n\t\tid(pk+fk)\trealname\t\t\ttel\t\t\t....\n\t\t------------------------------------------------\n\t\t1\t\t\t\t张三\t\t\t\t1111111111\n\t\t2\t\t\t\t李四\t\t\t\t1111415621\n\n\t一对一设计有两种方案：外键唯一。\n\t\tt_user_login  用户登录表\n\t\tid(pk)\t\tusername\t\t\tpassword\n\t\t--------------------------------------\n\t\t1\t\t\t\tzs\t\t\t\t\t123\n\t\t2\t\t\t\tls\t\t\t\t\t456\n\n\t\tt_user_detail 用户详细信息表\n\t\tid(pk)\t   realname\t\t\ttel\t\t\t\tuserid(fk+unique)....\n\t\t-----------------------------------------------------------\n\t\t1\t\t\t\t张三\t\t\t\t1111111111\t\t2\n\t\t2\t\t\t\t李四\t\t\t\t1111415621\t\t1\n</code></pre>\n","prev":{"title":"JDBC基础知识","link":"2021/06/08/JDBC基础知识"},"next":{"title":"Spring","link":"2021/06/08/Spring"},"plink":"http://jnbuck.top/blog/2021/06/08/MySQL笔记/","toc":[{"id":"第一个部分","title":"第一个部分","index":"1"},{"id":"第二个部分","title":"第二个部分","index":"2"},{"id":"第三部分","title":"第三部分","index":"3"}],"copyright":{"author":"JNbuck","link":"<a href=\"http://jnbuck.top/blog/2021/06/08/MySQL笔记/\" title=\"MySQL笔记\">http://jnbuck.top/blog/2021/06/08/MySQL笔记/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"},"reading_time":"15410 words in 103 min"}